//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using BoysheO.Extensions;

namespace BoysheO
{
    internal sealed class SR
    {
        public static string Acc_CreateAbst = "Cannot create an abstract class.";

        public static string Acc_CreateAbstEx = "Cannot create an instance of {0} because it is an abstract class.";

        public static string Acc_CreateArgIterator = "Cannot dynamically create an instance of ArgIterator.";

        public static string Acc_CreateGeneric =
            "Cannot create a type for which Type.ContainsGenericParameters is true.";

        public static string Acc_CreateGenericEx =
            "Cannot create an instance of {0} because Type.ContainsGenericParameters is true.";

        public static string Acc_CreateInterface = "Cannot create an instance of an interface.";

        public static string Acc_CreateInterfaceEx = "Cannot create an instance of {0} because it is an interface.";

        public static string Acc_CreateVoid = "Cannot dynamically create an instance of System.Void.";

        public static string Acc_NotClassInit = "Type initializer was not callable.";

        public static string Acc_ReadOnly = "Cannot set a constant field.";

        public static string Access_Void = "Cannot create an instance of void.";

        public static string AggregateException_ctor_DefaultMessage = "One or more errors occurred.";

        public static string AggregateException_ctor_InnerExceptionNull = "An element of innerExceptions was null.";

        public static string AggregateException_DeserializationFailure =
            "The serialization stream contains no inner exceptions.";

        public static string AggregateException_InnerException = "(Inner Exception #{0}) ";

        public static string AppDomain_Name = "Name:";

        public static string AppDomain_NoContextPolicies = "There are no context policies.";

        public static string AppDomain_Policy_PrincipalTwice = "Default principal object cannot be set twice.";

        public static string Arg_AccessException = "Cannot access member.";

        public static string Arg_AccessViolationException =
            "Attempted to read or write protected memory. This is often an indication that oth" +
            "er memory is corrupt.";

        public static string Arg_AmbiguousImplementationException_NoMessage = "Ambiguous implementation found.";

        public static string Arg_AmbiguousMatchException_Attribute =
            "Multiple custom attributes of the same type \'{0}\' found.";

        public static string Arg_AmbiguousMatchException_NoMessage = "Ambiguous match found.";

        public static string Arg_AmbiguousMatchException_CustomAttributeData = "Ambiguous match found for \'{0}\'.";

        public static string Arg_AmbiguousMatchException_MemberInfo = "Ambiguous match found for \'{0} {1}\'.";

        public static string Arg_AmbiguousMatchException_UnsafeAccessor =
            "Ambiguity in binding of UnsafeAccessorAttribute.";

        public static string Arg_ApplicationException = "Error in the application.";

        public static string Arg_ArgumentException = "Value does not fall within the expected range.";

        public static string Arg_ArgumentOutOfRangeException =
            "Specified argument was out of the range of valid values.";

        public static string Arg_ArithmeticException = "Overflow or underflow in the arithmetic operation.";

        public static string Arg_ArrayLengthsDiffer = "Array lengths must be the same.";

        public static string Arg_ArrayPlusOffTooSmall =
            "Destination array is not long enough to copy all the items in the collection. Che" +
            "ck array index and length.";

        public static string Arg_ByteArrayTooSmallForValue =
            "The array starting from the specified index is not long enough to read a value of" +
            " the specified type.";

        public static string Arg_ArrayTypeMismatchException =
            "Attempted to access an element as a type incompatible with the array.";

        public static string Arg_ArrayZeroError = "Array must not be of length zero.";

        public static string Arg_BadDecimal = "Read an invalid decimal value from the buffer.";

        public static string Arg_BadImageFormatException =
            "Format of the executable (.exe) or library (.dll) is invalid.";

        public static string Arg_BadLiteralFormat = "Encountered an invalid type for a default value.";

        public static string Arg_BogusIComparer =
            "Unable to sort because the IComparer.Compare() method returns inconsistent result" +
            "s. Either a value does not compare equal to itself, or one value repeatedly comp" +
            "ared to another value yields different results. IComparer: \'{0}\'.";

        public static string Arg_BufferTooSmall = "Not enough space available in the buffer.";

        public static string Arg_CannotBeNaN = "TimeSpan does not accept floating point Not-a-Number values.";

        public static string Arg_CannotHaveNegativeValue =
            "String cannot contain a minus sign if the base is not 10.";

        public static string Arg_CannotMarshal =
            "Type \'{0}\' cannot be marshaled as an unmanaged structure; no meaningful size or o" +
            "ffset can be computed.";

        public static string Arg_CannotMixComparisonInfrastructure =
            "The usage of IKeyComparer and IHashCodeProvider/IComparer interfaces cannot be mi" +
            "xed; use one or the other.";

        public static string Arg_CannotUnloadAppDomainException = "Attempt to unload the AppDomain failed.";

        public static string Arg_COMAccess = "Must specify property Set or Get or method call for a COM Object.";

        public static string Arg_COMException =
            "Error HRESULT E_FAIL has been returned from a call to a COM component.";

        public static string Arg_COMPropSetPut =
            "Only one of the following binding flags can be set: BindingFlags.SetProperty, Bin" +
            "dingFlags.PutDispProperty,  BindingFlags.PutRefDispProperty.";

        public static string Arg_ContainsNonAscii = "Text must not contain non-ASCII characters.";

        public static string Arg_CreatInstAccess = "Cannot specify both CreateInstance and another access type.";

        public static string Arg_CryptographyException = "Error occurred during a cryptographic operation.";

        public static string Arg_CustomAttributeFormatException =
            "Binary format of the specified custom attribute was invalid.";

        public static string Arg_DataMisalignedException =
            "A datatype misalignment was detected in a load or store instruction.";

        public static string Arg_DecBitCtor =
            "Decimal constructor requires an array or span of four valid decimal bytes.";

        public static string Arg_DirectoryNotFoundException = "Attempted to access a path that is not on the disk.";

        public static string Arg_DivideByZero = "Attempted to divide by zero.";

        public static string Arg_DlgtNullInst = "Delegate to an instance method cannot have null \'this\'.";

        public static string Arg_DlgtTargMeth =
            "Cannot bind to the target method because its signature is not compatible with tha" +
            "t of the delegate type.";

        public static string Arg_DlgtTypeMis = "Delegates must be of the same type.";

        public static string Arg_DllNotFoundException = "Dll was not found.";

        public static string Arg_DllNameCannotBeEmpty = "DllName cannot be empty.";

        public static string Arg_DuplicateWaitObjectException = "Duplicate objects in argument.";

        public static string Arg_EHClauseNotClause = "This ExceptionHandlingClause is not a clause.";

        public static string Arg_EHClauseNotFilter = "This ExceptionHandlingClause is not a filter.";

        public static string Arg_EmptyArray = "Array may not be empty.";

        public static string Arg_EmptySpan = "Span may not be empty.";

        public static string Arg_EndOfStreamException = "Attempted to read past the end of the stream.";

        public static string Arg_EntryPointNotFoundException = "Entry point was not found.";

        public static string Arg_EnumAndObjectMustBeSameType =
            "Object must be the same type as the enum. The type passed in was \'{0}\'; the enum " +
            "type was \'{1}\'.";

        public static string Arg_EnumFormatUnderlyingTypeAndObjectMustBeSameType =
            "Enum underlying type and the object must be same type or object. Type passed in w" +
            "as \'{0}\'; the enum underlying type was \'{1}\'.";

        public static string Arg_EnumIllegalVal = "Illegal enum value: {0}.";

        public static string Arg_EnumLitValueNotFound = "Literal value was not found.";

        public static string Arg_EnumUnderlyingTypeAndObjectMustBeSameType =
            "Enum underlying type and the object must be same type or object must be a String." +
            " Type passed in was \'{0}\'; the enum underlying type was \'{1}\'.";

        public static string Arg_EnumValueNotFound = "Requested value \'{0}\' was not found.";

        public static string Arg_ExecutionEngineException = "Internal error in the runtime.";

        public static string Arg_ExternalException = "External component has thrown an exception.";

        public static string Arg_EnC_ExpectedPrimitive =
            "Edit and Continue: Expected a primitive, valuetype, class or interface field.";

        public static string Arg_FieldAccessException =
            "Attempted to access a field that is not accessible by the caller.";

        public static string Arg_FieldDeclTarget =
            "Field \'{0}\' defined on type \'{1}\' is not a field on the target object which is of" +
            " type \'{2}\'.";

        public static string Arg_FldGetArgErr = "No arguments can be provided to Get a field value.";

        public static string Arg_FldGetPropSet = "Cannot specify both GetField and SetProperty.";

        public static string Arg_FldSetArgErr = "Only the field value can be specified to set a field value.";

        public static string Arg_FldSetGet = "Cannot specify both Get and Set on a field.";

        public static string Arg_FldSetInvoke = "Cannot specify Set on a Field and Invoke on a method.";

        public static string Arg_FldSetPropGet = "Cannot specify both SetField and GetProperty.";

        public static string Arg_FormatException = "One of the identified items was in an invalid format.";

        public static string Arg_GenericArgumentsAfterArrayOrPointerType =
            "Generic arguments after array spec or pointer type.";

        public static string Arg_GenericParameter =
            "Method must be called on a Type for which Type.IsGenericParameter is false.";

        public static string Arg_GetMethNotFnd = "Property Get method was not found.";

        public static string Arg_GuidArrayCtor = "Byte array for Guid must be exactly {0} bytes long.";

        public static string Arg_HandleNotAsync =
            "Handle does not support asynchronous operations. The parameters to the FileStream" +
            " constructor may need to be changed to indicate that the handle was opened synch" +
            "ronously (that is, it was not opened for overlapped I/O).";

        public static string Arg_HandleNotSync =
            "Handle does not support synchronous operations. The parameters to the FileStream " +
            "constructor may need to be changed to indicate that the handle was opened asynch" +
            "ronously (that is, it was opened explicitly for overlapped I/O).";

        public static string Arg_HexBinaryStylesNotSupported =
            "The number styles AllowHexSpecifier and AllowBinarySpecifier are not supported on" +
            " floating point data types.";

        public static string Arg_HTCapacityOverflow =
            "Hashtable\'s capacity overflowed and went negative. Check load factor, capacity an" +
            "d the current size of the table.";

        public static string Arg_IndexMustBeInt = "All indexes must be of type Int32.";

        public static string Arg_IndexOutOfRangeException = "Index was outside the bounds of the array.";

        public static string Arg_InsufficientExecutionStackException =
            "Insufficient stack to continue executing the program safely. This can happen from" +
            " having too many functions on the call stack or function on the stack using too " +
            "much stack space.";

        public static string Arg_InvalidANSIString =
            "The ANSI string passed in could not be converted from the default ANSI code page " +
            "to Unicode.";

        public static string Arg_InvalidBase = "Invalid Base.";

        public static string Arg_InvalidCastException = "Specified cast is not valid.";

        public static string Arg_InvalidComObjectException =
            "Attempt has been made to use a COM object that does not have a backing class fact" +
            "ory.";

        public static string Arg_InvalidFilterCriteriaException = "Specified filter criteria was invalid.";

        public static string Arg_InvalidHandle = "Invalid handle.";

        public static string Arg_InvalidHexBinaryStyle =
            "With the AllowHexSpecifier or AllowBinarySpecifier bit set in the enum bit field," +
            " the only other valid bits that can be combined into the enum value must be Allo" +
            "wLeadingWhite and AllowTrailingWhite.";

        public static string Arg_InvalidNeutralResourcesLanguage_Asm_Culture =
            "The NeutralResourcesLanguageAttribute on the assembly \"{0}\" specifies an invalid " +
            "culture name: \"{1}\".";

        public static string Arg_InvalidNeutralResourcesLanguage_FallbackLoc =
            "The NeutralResourcesLanguageAttribute specifies an invalid or unrecognized ultima" +
            "te resource fallback location: \"{0}\".";

        public static string Arg_InvalidSatelliteContract_Asm_Ver =
            "Satellite contract version attribute on the assembly \'{0}\' specifies an invalid v" +
            "ersion: {1}.";

        public static string Arg_InvalidOleVariantTypeException = "Specified OLE variant was invalid.";

        public static string Arg_InvalidOperationException =
            "Operation is not valid due to the current state of the object.";

        public static string Arg_InvalidTypeInRetType = "The return Type must be a type provided by the runtime.";

        public static string Arg_InvalidTypeInSignature =
            "The signature Type array contains some invalid type (i.e. null, void)";

        public static string Arg_InvalidUTF8String =
            "The UTF-8 string passed in could not be converted to Unicode.";

        public static string Arg_IOException = "I/O error occurred.";

        public static string Arg_KeyNotFound = "The given key was not present in the dictionary.";

        public static string Arg_KeyNotFoundWithKey = "The given key \'{0}\' was not present in the dictionary.";

        public static string Arg_LongerThanDestArray =
            "Destination array was not long enough. Check the destination index, length, and t" +
            "he array\'s lower bounds.";

        public static string Arg_LongerThanSrcArray =
            "Source array was not long enough. Check the source index, length, and the array\'s" +
            " lower bounds.";

        public static string Arg_LongerThanSrcString =
            "Source string was not long enough. Check sourceIndex and count.";

        public static string Arg_LowerBoundsMustMatch = "The arrays\' lower bounds must be identical.";

        public static string Arg_MarshalAsAnyRestriction =
            "AsAny cannot be used on return types, ByRef parameters, ArrayWithOffset, or param" +
            "eters passed from unmanaged to managed.";

        public static string Arg_MarshalDirectiveException = "Marshaling directives are invalid.";

        public static string Arg_MethodAccessException = "Attempt to access the method failed.";

        public static string Arg_MissingFieldException = "Attempted to access a non-existing field.";

        public static string Arg_MissingManifestResourceException = "Unable to find manifest resource.";

        public static string Arg_MissingMemberException = "Attempted to access a missing member.";

        public static string Arg_MissingMethodException = "Attempted to access a missing method.";

        public static string Arg_MulticastNotSupportedException =
            "Attempted to add multiple callbacks to a delegate that does not support multicast" +
            ".";

        public static string Arg_MustBeBoolean = "Object must be of type Boolean.";

        public static string Arg_MustBeByte = "Object must be of type Byte.";

        public static string Arg_MustBeChar = "Object must be of type Char.";

        public static string Arg_MustBeDateOnly = "Object must be of type DateOnly.";

        public static string Arg_MustBeTimeOnly = "Object must be of type TimeOnly.";

        public static string Arg_MustBeDateTime = "Object must be of type DateTime.";

        public static string Arg_MustBeDateTimeOffset = "Object must be of type DateTimeOffset.";

        public static string Arg_MustBeDecimal = "Object must be of type Decimal.";

        public static string Arg_MustBeDelegate = "Type must derive from Delegate.";

        public static string Arg_MustBeDouble = "Object must be of type Double.";

        public static string Arg_MustBeDriveLetterOrRootDir =
            "Drive name must be a root directory (i.e. \'C:\\\') or a drive letter (\'C\').";

        public static string Arg_MustBeEnum = "Type provided must be an Enum.";

        public static string Arg_MustBeEnumBaseTypeOrEnum =
            "The value passed in must be an enum base or an underlying type for an enum, such " +
            "as an Int32.";

        public static string Arg_MustBeGuid = "Object must be of type GUID.";

        public static string Arg_MustBeInt16 = "Object must be of type Int16.";

        public static string Arg_MustBeInt32 = "Object must be of type Int32.";

        public static string Arg_MustBeInt64 = "Object must be of type Int64.";

        public static string Arg_MustBeInt128 = "Object must be of type Int128.";

        public static string Arg_MustBeIntPtr = "Object must be of type IntPtr.";

        public static string Arg_MustBeInterface = "Type passed must be an interface.";

        public static string Arg_MustBeNFloat = "Object must be of type NFloat.";

        public static string Arg_MustBePointer = "Type must be a Pointer.";

        public static string Arg_MustBePrimArray = "Object must be an array of primitives.";

        public static string Arg_MustBeRuntimeAssembly = "Object must be of type RuntimeAssembly.";

        public static string Arg_MustBeSByte = "Object must be of type SByte.";

        public static string Arg_MustBeSingle = "Object must be of type Single.";

        public static string Arg_MustBeString = "Object must be of type String.";

        public static string Arg_MustBeTimeSpan = "Object must be of type TimeSpan.";

        public static string Arg_MustBeType = "Type must be a type provided by the runtime.";

        public static string Arg_MustBeTrue = "Argument must be true.";

        public static string Arg_MustBeUInt16 = "Object must be of type UInt16.";

        public static string Arg_MustBeUInt32 = "Object must be of type UInt32.";

        public static string Arg_MustBeUInt64 = "Object must be of type UInt64.";

        public static string Arg_MustBeUInt128 = "Object must be of type UInt128.";

        public static string Arg_MustBeUIntPtr = "Object must be of type UIntPtr.";

        public static string Arg_MustBeVersion = "Object must be of type Version.";

        public static string Arg_MustContainEnumInfo = "Must specify valid information for parsing in the string.";

        public static string Arg_NamedParamNull = "Named parameter value must not be null.";

        public static string Arg_NamedParamTooBig = "Named parameter array cannot be bigger than argument array.";

        public static string Arg_NDirectBadObject =
            "No PInvoke conversion exists for value passed to Object-typed parameter.";

        public static string Arg_Need1DArray = "Array was not a one-dimensional array.";

        public static string Arg_Need2DArray = "Array was not a two-dimensional array.";

        public static string Arg_Need3DArray = "Array was not a three-dimensional array.";

        public static string Arg_NeedAtLeast1Rank = "Must provide at least one rank.";

        public static string Arg_NegativeArgCount = "Argument count must not be negative.";

        public static string Arg_NoAccessSpec =
            "Must specify binding flags describing the invoke operation required (BindingFlags" +
            ".InvokeMethod CreateInstance GetField SetField GetProperty SetProperty).";

        public static string Arg_NoDefCTorWithoutTypeName = "No parameterless constructor defined.";

        public static string Arg_NoDefCTor = "No parameterless constructor defined for type \'{0}\'.";

        public static string Arg_NonZeroLowerBound = "The lower bound of target array must be zero.";

        public static string Arg_NoStaticVirtual = "Method cannot be both static and virtual.";

        public static string Arg_NotFiniteNumberException = "Number encountered was not a finite quantity.";

        public static string Arg_NotFoundIFace = "Interface not found.";

        public static string Arg_NotGenericMethodDefinition =
            "{0} is not a GenericMethodDefinition. MakeGenericMethod may only be called on a m" +
            "ethod for which MethodBase.IsGenericMethodDefinition is true.";

        public static string Arg_NotGenericParameter =
            "Method may only be called on a Type for which Type.IsGenericParameter is true.";

        public static string Arg_NotGenericTypeDefinition =
            "{0} is not a GenericTypeDefinition. MakeGenericType may only be called on a type " +
            "for which Type.IsGenericTypeDefinition is true.";

        public static string Arg_NotImplementedException = "The method or operation is not implemented.";

        public static string Arg_NotSupportedException = "Specified method is not supported.";

        public static string Arg_NullReferenceException = "Object reference not set to an instance of an object.";

        public static string Arg_ObjObj = "Object type cannot be converted to target type.";

        public static string Arg_ObjObjEx = "Object of type \'{0}\' cannot be converted to type \'{1}\'.";

        public static string Arg_OleAutDateInvalid = "Not a legal OleAut date.";

        public static string Arg_OleAutDateScale = "OleAut date did not convert to a DateTime correctly.";

        public static string Arg_OverflowException = "Arithmetic operation resulted in an overflow.";

        public static string Arg_OutOfMemoryException =
            "Insufficient memory to continue the execution of the program.";

        public static string Arg_ParamName_Name = "(Parameter \'{0}\')";

        public static string Arg_ParmArraySize = "Must specify one or more parameters.";

        public static string Arg_ParmCnt = "Parameter count mismatch.";

        public static string Arg_PathEmpty = "The path is empty.";

        public static string Arg_PlatformNotSupported = "Operation is not supported on this platform.";

        public static string Arg_PrimWiden =
            "Cannot widen from source type to target type either because the source type is a " +
            "not a primitive type or the conversion cannot be accomplished.";

        public static string Arg_PropSetGet = "Cannot specify both Get and Set on a property.";

        public static string Arg_PropSetInvoke = "Cannot specify Set on a property and Invoke on a method.";

        public static string Arg_RankException =
            "Attempted to operate on an array with the incorrect number of dimensions.";

        public static string Arg_RankIndices = "Indices length does not match the array rank.";

        public static string Arg_RankMultiDimNotSupported =
            "Only single dimensional arrays are supported for the requested action.";

        public static string Arg_RanksAndBounds = "Number of lengths and lowerBounds must match.";

        public static string Arg_RegValueTooLarge =
            "RegistryKey.GetValue does not support values with more than Int32.MaxValue bytes." +
            "";

        public static string Arg_RegKeyNotFound = "The specified registry key does not exist.";

        public static string Arg_RegSubKeyValueAbsent = "No value exists with that name.";

        public static string Arg_RegValStrLenBug =
            "Registry value names should not be greater than 16,383 characters.";

        public static string Arg_ResMgrNotResSet = "Type parameter must refer to a subclass of ResourceSet.";

        public static string Arg_ResourceFileUnsupportedVersion =
            "The ResourceReader class does not know how to read this version of .resources fil" +
            "es. Expected version: {0}  This file: {1}";

        public static string Arg_ResourceNameNotExist =
            "The specified resource name \"{0}\" does not exist in the resource file.";

        public static string Arg_SafeArrayRankMismatchException = "Specified array was not of the expected rank.";

        public static string Arg_SafeArrayTypeMismatchException = "Specified array was not of the expected type.";

        public static string Arg_SecurityException = "Security error.";

        public static string SerializationException = "Serialization error.";

        public static string Arg_SetMethNotFnd = "Property set method not found.";

        public static string Arg_StackOverflowException = "Operation caused a stack overflow.";

        public static string Arg_SurrogatesNotAllowedAsSingleChar =
            "Unicode surrogate characters must be written out as pairs together in the same ca" +
            "ll, not individually. Consider passing in a character array instead.";

        public static string Arg_SynchronizationLockException =
            "Object synchronization method was called from an unsynchronized block of code.";

        public static string Arg_SystemException = "System error.";

        public static string Arg_TargetInvocationException =
            "Exception has been thrown by the target of an invocation.";

        public static string Arg_TargetParameterCountException =
            "Number of parameters specified does not match the expected number.";

        public static string Arg_ThreadStartException = "Thread failed to start.";

        public static string Arg_ThreadStateException =
            "Thread was in an invalid state for the operation being executed.";

        public static string Arg_TimeoutException = "The operation has timed out.";

        public static string Arg_TypeAccessException = "Attempt to access the type failed.";

        public static string Arg_TypedReference_Null = "The TypedReference must be initialized.";

        public static string Arg_TypeLoadException = "Failure has occurred while loading a type.";

        public static string Arg_TypeLoadNullStr = "A null or zero length string does not represent a valid Type.";

        public static string Arg_TypeRefPrimitive =
            "TypedReferences cannot be redefined as primitives. Field name \'{0}\'.";

        public static string Arg_TypeUnloadedException = "Type had been unloaded.";

        public static string Arg_UnauthorizedAccessException = "Attempted to perform an unauthorized operation.";

        public static string Arg_UnboundGenField =
            "Late bound operations cannot be performed on fields with types for which Type.Con" +
            "tainsGenericParameters is true.";

        public static string Arg_UnboundGenParam =
            "Late bound operations cannot be performed on types or methods for which ContainsG" +
            "enericParameters is true.";

        public static string Arg_UnknownTypeCode = "Unknown TypeCode value.";

        public static string Arg_UnreachableException =
            "The program executed an instruction that was thought to be unreachable.";

        public static string Arg_VarMissNull = "Missing parameter does not have a default value.";

        public static string Arg_VersionString = "Version string portion was too short or too long.";

        public static string Arg_WrongType =
            "The value \"{0}\" is not of type \"{1}\" and cannot be used in this generic collectio" +
            "n.";

        public static string Argument_AbsolutePathRequired = "Path \"{0}\" is not an absolute path.";

        public static string Argument_AddingDuplicate = "An item with the same key has already been added.";

        public static string Argument_AddingDuplicate__ =
            "Item has already been added. Key in dictionary: \'{0}\'  Key being added: \'{1}\'";

        public static string Argument_AddingDuplicateWithKey =
            "An item with the same key has already been added. Key: {0}";

        public static string Argument_AdjustmentRulesNoNulls =
            "The AdjustmentRule array cannot contain null elements.";

        public static string Argument_AdjustmentRulesOutOfOrder =
            "The elements of the AdjustmentRule array must be in chronological order and must " +
            "not overlap.";

        public static string Argument_AlignmentMustBePow2 = "The alignment must be a power of two.";

        public static string Argument_AlreadyACCW = "The object already has a CCW associated with it.";

        public static string Argument_AlreadyBoundOrSyncHandle =
            "\'handle\' has already been bound to the thread pool, or was not opened for asynchr" +
            "onous I/O.";

        public static string Argument_ArrayGetInterfaceMap =
            "Interface maps for generic interfaces on arrays cannot be retrieved.";

        public static string Argument_ArraysInvalid = "Array or pointer types are not valid.";

        public static string Argument_ArrayParsingError = "Error parsing array spec.";

        public static string Argument_AttributeNamesMustBeUnique = "Attribute names must be unique.";

        public static string Argument_BadConstantValue = "Bad default value.";

        public static string Argument_BadConstructor = "Cannot have private or static constructor.";

        public static string Argument_BadConstructorCallConv = "Constructor must have standard calling convention.";

        public static string Argument_BadExceptionCodeGen = "Incorrect code generation for exception block.";

        public static string Argument_BadFieldForConstructorBuilder =
            "Field must be on the same type of the given ConstructorInfo.";

        public static string Argument_BadFieldSig = "Field signatures do not have return types.";

        public static string Argument_BadFieldType = "Bad field type in defining field.";

        public static string Argument_BadFormatSpecifier = "Format specifier was invalid.";

        public static string Argument_BadImageFormatExceptionResolve =
            "A BadImageFormatException has been thrown while parsing the signature. This is li" +
            "kely due to lack of a generic context. Ensure genericTypeArguments and genericMe" +
            "thodArguments are provided and contain enough context.";

        public static string Argument_BadLabel = "Bad label in ILGenerator.";

        public static string Argument_BadLabelContent = "Bad label content in ILGenerator.";

        public static string Argument_BadNestedTypeFlags =
            "Visibility of interfaces must be one of the following: NestedAssembly, NestedFamA" +
            "NDAssem, NestedFamily, NestedFamORAssem, NestedPrivate or NestedPublic.";

        public static string Argument_BadObjRef = "Invalid ObjRef provided to \'{0}\'.";

        public static string Argument_BadParameterCountsForConstructor =
            "Parameter count does not match passed in argument value count.";

        public static string Argument_BadParameterTypeForCAB =
            "Cannot emit a CustomAttribute with argument of type {0}.";

        public static string Argument_BadPropertyForConstructorBuilder =
            "Property must be on the same type of the given ConstructorInfo.";

        public static string Argument_BadSigFormat = "Incorrect signature format.";

        public static string Argument_BadSizeForData = "Data size must be > 1 and < 0x3f0000";

        public static string Argument_BadTypeAttrInvalidLayout =
            "Bad type attributes. Invalid layout attribute specified.";

        public static string Argument_BadTypeAttrNestedVisibilityOnNonNestedType =
            "Bad type attributes. Nested visibility flag set on a non-nested type.";

        public static string Argument_BadTypeAttrNonNestedVisibilityNestedType =
            "Bad type attributes. Non-nested visibility flag set on a nested type.";

        public static string Argument_BadTypeAttrReservedBitsSet =
            "Bad type attributes. Reserved bits set on the type.";

        public static string Argument_BadTypeInCustomAttribute =
            "An invalid type was used as a custom attribute constructor argument, field or pro" +
            "perty.";

        public static string Argument_ByrefQualifierMustBeLastOneOfAType =
            "Byref qualifier must be the last one of a type.";

        public static string Argument_CannotCreateTypedReference =
            "Cannot use function evaluation to create a TypedReference object.";

        public static string Argument_CannotSetParentToInterface = "Cannot set parent to an interface.";

        public static string Argument_CodepageNotSupported = "{0} is not a supported code page.";

        public static string Argument_CompareOptionOrdinal =
            "CompareOption.Ordinal cannot be used with other options.";

        public static string Argument_ConflictingDateTimeRoundtripStyles =
            "The DateTimeStyles value RoundtripKind cannot be used with the values AssumeLocal" +
            ", AssumeUniversal or AdjustToUniversal.";

        public static string Argument_ConflictingDateTimeStyles =
            "The DateTimeStyles values AssumeLocal and AssumeUniversal cannot be used together" +
            ".";

        public static string Argument_ConstantDoesntMatch = "Constant does not match the defined type.";

        public static string Argument_ConstantNotSupported = "{0} is not a supported constant type.";

        public static string Argument_ConstantNull = "Null is not a valid constant value for this type.";

        public static string Argument_ConstructorNeedGenericDeclaringType =
            "The specified constructor must be declared on a generic type definition.";

        public static string Argument_ConversionOverflow = "Conversion buffer overflow.";

        public static string Argument_ConvertMismatch =
            "The conversion could not be completed because the supplied DateTime did not have " +
            "the Kind property set correctly.  For example, when the Kind property is DateTim" +
            "eKind.Local, the source time zone must be TimeZoneInfo.Local.";

        public static string Argument_CORDBBadMethod = "Cannot find the method on the object instance.";

        public static string Argument_CORDBBadVarArgCallConv = "Cannot evaluate a VarArgs function.";

        public static string Argument_CultureIetfNotSupported =
            "Culture IETF Name {0} is not a recognized IETF name.";

        public static string Argument_CultureInvalidIdentifier = "{0} is an invalid culture identifier.";

        public static string Argument_CultureIsNeutral =
            "Culture ID {0} (0x{0:X4}) is a neutral culture; a region cannot be created from i" +
            "t.";

        public static string Argument_CultureNotSupported = "Culture is not supported.";

        public static string Argument_CultureNotSupportedInInvariantMode =
            "Only the invariant culture is supported in globalization-invariant mode. See http" +
            "s://aka.ms/GlobalizationInvariantMode for more information.";

        public static string Argument_CustomAssemblyLoadContextRequestedNameMismatch =
            "Resolved assembly\'s simple name should be the same as of the requested assembly.";

        public static string Argument_CustomCultureCannotBePassedByNumber =
            "Customized cultures cannot be passed by LCID, only by name.";

        public static string Argument_CustomModifierLengthInvalidLength =
            "Custom modifiers length \'{0}\' does not match the size of the arguments.";

        public static string Argument_DateTimeBadBinaryData =
            "The binary data must result in a DateTime with ticks between DateTime.MinValue.Ti" +
            "cks and DateTime.MaxValue.Ticks.";

        public static string Argument_DateTimeHasTicks =
            "The supplied DateTime must have the Year, Month, and Day properties set to 1.  Th" +
            "e time cannot be specified more precisely than whole milliseconds.";

        public static string Argument_DateTimeHasTimeOfDay =
            "The supplied DateTime includes a TimeOfDay setting.   This is not supported.";

        public static string Argument_DateTimeIsInvalid =
            "The supplied DateTime represents an invalid time.  For example, when the clock is" +
            " adjusted forward, any time in the period that is skipped is invalid.";

        public static string Argument_DateTimeIsNotAmbiguous =
            "The supplied DateTime is not in an ambiguous time range.";

        public static string Argument_DateTimeKindMustBeUnspecified =
            "The supplied DateTime must have the Kind property set to DateTimeKind.Unspecified" +
            ".";

        public static string Argument_DateTimeKindMustBeUnspecifiedOrUtc =
            "The supplied DateTime must have the Kind property set to DateTimeKind.Unspecified" +
            " or DateTimeKind.Utc.";

        public static string Argument_DateTimeOffsetInvalidDateTimeStyles =
            "The DateTimeStyles value \'NoCurrentDateDefault\' is not allowed when parsing DateT" +
            "imeOffset.";

        public static string Argument_DateTimeOffsetIsNotAmbiguous =
            "The supplied DateTimeOffset is not in an ambiguous time range.";

        public static string Argument_DestinationTooShort = "Destination is too short.";

        public static string Argument_DuplicateTypeName = "Duplicate type name within an assembly.";

        public static string Argument_EmitWriteLineType =
            "EmitWriteLine does not support this field or local type.";

        public static string Argument_EmptyFileName = "Empty file name is not legal.";

        public static string Argument_EmptyName = "Empty name is not legal.";

        public static string Argument_EmptyWaithandleArray = "Waithandle array may not be empty.";

        public static string Argument_EncoderFallbackNotEmpty =
            "Must complete Convert() operation or call Encoder.Reset() before calling GetBytes" +
            "() or GetByteCount(). Encoder \'{0}\' fallback \'{1}\'.";

        public static string Argument_EncodingConversionOverflowBytes =
            "The output byte buffer is too small to contain the encoded data, encoding codepag" +
            "e \'{0}\' and fallback \'{1}\'.";

        public static string Argument_EncodingConversionOverflowChars =
            "The output char buffer is too small to contain the decoded characters, encoding c" +
            "odepage \'{0}\' and fallback \'{1}\'.";

        public static string Argument_EncodingNotSupported =
            "\'{0}\' is not a supported encoding name. For information on defining a custom enco" +
            "ding, see the documentation for the Encoding.RegisterProvider method.";

        public static string Argument_EnumTypeDoesNotMatch =
            "The argument type, \'{0}\', is not the same as the enum type \'{1}\'.";

        public static string Argument_FallbackBufferNotEmpty =
            "Cannot change fallback when buffer is not empty. Previous Convert() call left dat" +
            "a in the fallback buffer.";

        public static string Argument_FieldDeclaringTypeGeneric =
            "Cannot resolve field {0} because the declaring type of the field handle {1} is ge" +
            "neric. Explicitly provide the declaring type to GetFieldFromHandle.";

        public static string Argument_FieldDoesNotBelongToConstructorClass =
            "Field \'{0}\' does not belong to the same class as the constructor.";

        public static string Argument_FieldDoesNotHaveAValidType = "Field \'{0}\' does not have a valid type.";

        public static string Argument_FieldDoesNotHaveAValidValue = "Field \'{0}\' does not have a valid value.";

        public static string Argument_FieldPropertyEventAndTypeHandleIncompatibility =
            "The field, property or event handle and the type handle are incompatible.";

        public static string Argument_FieldNeedGenericDeclaringType =
            "The specified field must be declared on a generic type definition.";

        public static string Argument_GenConstraintViolation =
            "GenericArguments[{0}], \'{1}\', on \'{2}\' violates the constraint of type \'{3}\'.";

        public static string Argument_GenericArgsCount =
            "The number of generic arguments provided doesn\'t equal the arity of the generic t" +
            "ype definition.";

        public static string Argument_GenericArgumentCannotBeByrefOrPointerType =
            "Generic argument can\'t be a byref or pointer type.";

        public static string Argument_GenericsInvalid = "Generic types are not valid.";

        public static string Argument_GenericParsingError = "Error parsing generic params spec.";

        public static string Argument_OpenGenericTypeNotPermitted = "Open generic type not permitted.";

        public static string Argument_GlobalMembersMustBeStatic = "Global members must be static.";

        public static string Argument_HasToBeArrayClass = "Must be an array type.";

        public static string Argument_IdnBadBidi =
            "Left to right characters may not be mixed with right to left characters in IDN la" +
            "bels.";

        public static string Argument_IdnBadLabelSize = "IDN labels must be between 1 and 63 characters long.";

        public static string Argument_IdnBadNameSize = "IDN names must be between 1 and {0} characters long.";

        public static string Argument_IdnBadPunycode = "Invalid IDN encoded string.";

        public static string Argument_IdnBadStd3 =
            "Label contains character \'{0}\' not allowed with UseStd3AsciiRules";

        public static string Argument_IdnIllegalName = "Decoded string is not a valid IDN name.";

        public static string Argument_IllegalEnvVarName =
            "Environment variable name cannot contain equal character.";

        public static string Argument_IllegalName = "Illegal name.";

        public static string Argument_ImplementIComparable = "At least one object must implement IComparable.";

        public static string Argument_IndexOutOfArrayBounds =
            "The specified index is out of bounds of the specified array.";

        public static string Argument_InterfaceMap = "\'this\' type cannot be an interface itself.";

        public static string Argument_InvalidAppendMode = "Append access can be requested only in write-only mode.";

        public static string Argument_InvalidPreallocateAccess =
            "Preallocation size can be requested only in write mode.";

        public static string Argument_InvalidPreallocateMode =
            "Preallocation size can be requested only for new files.";

        public static string Argument_InvalidUnixCreateMode =
            "UnixCreateMode can be requested only for modes that can create new files.";

        public static string Argument_InvalidArgumentForComparison =
            "Type of argument is not compatible with the generic comparer.";

        public static string Argument_InvalidArrayLength = "Length of the array must be {0}.";

        public static string Argument_MultiDimensionalArrayCannotBeBound =
            "Invalid array spec, multi-dimensional array cannot be bound.";

        public static string Argument_IncompatibleArrayType =
            "Target array type is not compatible with the type of items in the collection.";

        public static string Argument_InvalidArrayType = "Invalid array/generic spec.";

        public static string InvalidAssemblyName = "The given assembly name was invalid.";

        public static string Argument_InvalidCalendar = "Not a valid calendar for the given culture.";

        public static string Argument_InvalidCharInArraySpecification =
            "\"Invalid character in array spec: \'{0}\'.";

        public static string Argument_InvalidCharSequence = "Invalid Unicode code point found at index {0}.";

        public static string Argument_InvalidCharSequenceNoIndex = "String contains invalid Unicode code points.";

        public static string Argument_InvalidCodePageBytesIndex =
            "Unable to translate bytes {0} at index {1} from specified code page to Unicode.";

        public static string Argument_InvalidCodePageConversionIndex =
            "Unable to translate Unicode character \\\\u{0:X4} at index {1} to specified code pa" +
            "ge.";

        public static string Argument_InvalidConstructorDeclaringType =
            "The specified constructor must be declared on the generic type definition of the " +
            "specified type.";

        public static string Argument_InvalidConstructorInfo = "The ConstructorInfo object is not valid.";

        public static string Argument_InvalidCultureName = "Culture name \'{0}\' is not supported.";

        public static string Argument_InvalidPredefinedCultureName =
            "Culture name \'{0}\' is not a predefined culture.";

        public static string Argument_InvalidDateTimeKind = "Invalid DateTimeKind value.";

        public static string Argument_InvalidDateTimeStyles = "An undefined DateTimeStyles value is being used.";

        public static string Argument_InvalidDateStyles =
            "The only allowed values for the styles are AllowWhiteSpaces, AllowTrailingWhite, " +
            "AllowLeadingWhite, and AllowInnerWhite.";

        public static string Argument_InvalidDigitSubstitution =
            "The DigitSubstitution property must be of a valid member of the DigitShapes enume" +
            "ration. Valid entries include Context, NativeNational or None.";

        public static string Argument_InvalidElementName = "Invalid element name \'{0}\'.";

        public static string Argument_InvalidElementTag = "Invalid element tag \'{0}\'.";

        public static string Argument_InvalidElementText = "Invalid element text \'{0}\'.";

        public static string Argument_InvalidElementValue = "Invalid element value \'{0}\'.";

        public static string Argument_InvalidEnum = "The Enum type should contain one and only one instance field.";

        public static string Argument_InvalidEnumValue =
            "The value \'{0}\' is not valid for this usage of the type {1}.";

        public static string Argument_InvalidFieldDeclaringType =
            "The specified field must be declared on the generic type definition of the specif" +
            "ied type.";

        public static string Argument_InvalidFileModeAndAccessCombo =
            "Combining FileMode: {0} with FileAccess: {1} is invalid.";

        public static string Argument_InvalidFlag = "Value of flags is invalid.";

        public static string Argument_InvalidGenericArg = "The generic type parameter was not valid";

        public static string Argument_InvalidGenericArgumentsSeparator =
            "Invalid generic arguments separator \'{0}\'";

        public static string Argument_InvalidGenericInstArray =
            "Generic arguments must be provided for each generic parameter and each generic ar" +
            "gument must be a RuntimeType.";

        public static string Argument_InvalidGroupSize =
            "Every element in the value array should be between one and nine, except for the l" +
            "ast element, which can be zero.";

        public static string Argument_InvalidHandle = "The handle is invalid.";

        public static string Argument_InvalidHighSurrogate =
            "Found a high surrogate char without a following low surrogate at index: {0}. The " +
            "input may not be in this encoding, or may not contain valid Unicode (UTF-16) cha" +
            "racters.";

        public static string Argument_InvalidId = "The specified ID parameter \'{0}\' is not supported.";

        public static string Argument_InvalidKindOfTypeForCA =
            "This type cannot be represented as a custom attribute.";

        public static string Argument_InvalidLabel = "Invalid Label.";

        public static string Argument_InvalidLowSurrogate =
            "Found a low surrogate char without a preceding high surrogate at index: {0}. The " +
            "input may not be in this encoding, or may not contain valid Unicode (UTF-16) cha" +
            "racters.";

        public static string Argument_InvalidMemberForNamedArgument =
            "The member must be either a field or a property.";

        public static string Argument_InvalidMethodDeclaringType =
            "The specified method must be declared on the generic type definition of the speci" +
            "fied type.";

        public static string Argument_InvalidName = "Invalid name.";

        public static string Argument_InvalidNativeDigitCount =
            "The NativeDigits array must contain exactly ten members.";

        public static string Argument_InvalidNativeDigitValue =
            "Each member of the NativeDigits array must be a single text element (one or more " +
            "UTF-16 code points) with a Unicode Nd (Number, Decimal Digit) property indicatin" +
            "g it is a digit.";

        public static string Argument_InvalidNeutralRegionName =
            "The region name {0} should not correspond to neutral culture; a specific culture " +
            "name is required.";

        public static string Argument_InvalidNormalizationForm = "Invalid or unsupported normalization form.";

        public static string Argument_InvalidNumberStyles = "An undefined NumberStyles value is being used.";

        public static string Argument_InvalidOffLen =
            "Offset and length were out of bounds for the array or count is greater than the n" +
            "umber of elements from index to the end of the source collection.";

        public static string Argument_InvalidOpCodeOnDynamicMethod =
            "Ldtoken, Ldftn and Ldvirtftn OpCodes cannot target DynamicMethods.";

        public static string Argument_InvalidParameterInfo = "The ParameterInfo object is not valid.";

        public static string Argument_InvalidParamInfo =
            "Invalid type for ParameterInfo member in Attribute class.";

        public static string Argument_NullCharInPath = "Null character in path.";

        public static string Argument_InvalidResourceCultureName =
            "The given culture name \'{0}\' cannot be used to locate a resource file. Resource f" +
            "ilenames must consist of only letters, numbers, hyphens or underscores.";

        public static string Argument_InvalidSafeBufferOffLen =
            "Offset and length were greater than the size of the SafeBuffer.";

        public static string Argument_InvalidSeekOrigin = "Invalid seek origin.";

        public static string Argument_InvalidSerializedString =
            "The specified serialized string \'{0}\' is not supported.";

        public static string Argument_InvalidStartupHookSignature =
            "The signature of the startup hook \'{0}\' in assembly \'{1}\' was invalid. It must be" +
            " \'public static void Initialize()\'.";

        public static string Argument_InvalidTimeSpanStyles = "An undefined TimeSpanStyles value is being used.";

        public static string Argument_InvalidToken = "Token {0:x} is not valid in the scope of module {1}.";

        public static string Argument_InvalidTypeForCA =
            "Cannot build type parameter for custom attribute with a type that does not suppor" +
            "t the AssemblyQualifiedName property. The type instance supplied was of type \'{0" +
            "}\'.";

        public static string Argument_InvalidTypeForDynamicMethod = "Invalid type owner for DynamicMethod.";

        public static string Argument_InvalidTypeName = "The name of the type is invalid.";

        public static string Argument_InvalidTypeWithPointersNotSupported =
            "Cannot use type \'{0}\'. Only value types without pointers or references are suppor" +
            "ted.";

        public static string Argument_InvalidUnity = "Type \'{0}\' is not deserializable.";

        public static string Argument_InvalidValue = "Value was invalid.";

        public static string Argument_LargeInteger = "Integer or token was too large to be encoded.";

        public static string Argument_LabelUnmarked = "Label #{0} is not marked in method \'{1}\'.";

        public static string Argument_LongEnvVarValue = "Environment variable name or value is too long.";

        public static string Argument_MethodBodyMustBelongToType = "Method body must belong to this type.";

        public static string Argument_MethodDeclaringTypeGeneric =
            "Cannot resolve method {0} because the declaring type of the method handle {1} is " +
            "generic. Explicitly provide the declaring type to GetMethodFromHandle.";

        public static string Argument_MethodDeclaringTypeGenericLcg =
            "Method \'{0}\' has a generic declaring type \'{1}\'. Explicitly provide the declaring" +
            " type to GetTokenFor.";

        public static string Argument_MethodNeedGenericDeclaringType =
            "The specified method cannot be dynamic or global and must be declared on a generi" +
            "c type definition.";

        public static string Argument_MinMaxValue = "\'{0}\' cannot be greater than {1}.";

        public static string Argument_MismatchedArrays = "Two arrays, {0} and {1}, must be of  the same size.";

        public static string Argument_MustBeFalse = "Argument must be initialized to false";

        public static string Argument_MustBeRuntimeAssembly = "Assembly must be a runtime Assembly object.";

        public static string Argument_MustBeRuntimeFieldInfo = "FieldInfo must be a runtime FieldInfo object.";

        public static string Argument_MustBeRuntimeConstructorInfo =
            "ConstructorInfo must be a runtime ConstructorInfo object.";

        public static string Argument_MustBeRuntimeMethodInfo = "MethodInfo must be a runtime MethodInfo object.";

        public static string Argument_MustBeRuntimeMethod =
            "Method must be a runtime MethodInfo, ConstructorInfo or DynamicMethod object.";

        public static string Argument_MustBeRuntimeType = "Type must be a runtime Type object.";

        public static string Argument_MustBeTypeBuilder =
            "\'type\' must be or must contain a TypeBuilder as a generic argument.";

        public static string Argument_MustHaveAttributeBaseClass =
            "Type passed in must be derived from System.Attribute or System.Attribute itself.";

        public static string Argument_MustHaveLayoutOrBeBlittable =
            "The specified structure must be blittable or have layout information.";

        public static string Argument_NativeOverlappedAlreadyFree = "\'overlapped\' has already been freed.";

        public static string Argument_NativeOverlappedWrongBoundHandle =
            "\'overlapped\' was not allocated by this ThreadPoolBoundHandle instance.";

        public static string Argument_NeedGenericMethodDefinition =
            "Method must represent a generic method definition on a generic type definition.";

        public static string Argument_NeedNonGenericObject =
            "The specified object must not be an instance of a generic type.";

        public static string Argument_NeedNonGenericType = "The specified Type must not be a generic type.";

        public static string Argument_NeedStructWithNoRefs =
            "The specified Type must be a struct containing no references.";

        public static string Argument_NegativeFieldOffsetNotPermitted = "Negative field offset is not allowed.";

        public static string Argument_NeverValidGenericArgument =
            "The type \'{0}\' may not be used as a type argument.";

        public static string Argument_NoEra = "No Era was supplied.";

        public static string Argument_NoRegionInvariantCulture =
            "There is no region associated with the Invariant Culture (Culture ID: 0x7F).";

        public static string Argument_NotAWritableProperty = "Not a writable property.";

        public static string Argument_NotEnoughBytesToRead =
            "There are not enough bytes remaining in the accessor to read at this position.";

        public static string Argument_NotEnoughBytesToWrite =
            "There are not enough bytes remaining in the accessor to write at this position.";

        public static string Argument_NotEnoughGenArguments =
            "The type or method has {1} generic parameter(s), but {0} generic argument(s) were" +
            " provided. A generic argument must be provided for each generic parameter.";

        public static string Argument_NotExceptionType = "Does not extend Exception.";

        public static string Argument_NotInExceptionBlock = "Not currently in an exception block.";

        public static string Argument_NotMethodCallOpcode = "The specified opcode cannot be passed to EmitCall.";

        public static string Argument_NoUninitializedStrings = "Uninitialized Strings cannot be created.";

        public static string Argument_ObjNotComObject =
            "The object\'s type must be __ComObject or derived from __ComObject.";

        public static string Argument_OffsetAndCapacityOutOfBounds =
            "Offset and capacity were greater than the size of the view.";

        public static string Argument_OffsetLocalMismatch =
            "The UTC Offset of the local dateTime parameter does not match the offset argument" +
            ".";

        public static string Argument_OffsetOfFieldNotFound =
            "Field passed in is not a marshaled member of the type \'{0}\'.";

        public static string Argument_OffsetOutOfRange = "Offset must be within plus or minus 14 hours.";

        public static string Argument_OffsetPrecision = "Offset must be specified in whole minutes.";

        public static string Argument_OffsetUtcMismatch = "The UTC Offset for Utc DateTime instances must be 0.";

        public static string Argument_OneOfCulturesNotSupported = "Culture name {0} or {1} is not supported.";

        public static string Argument_OnlyMscorlib = "Only mscorlib\'s assembly is valid.";

        public static string Argument_OutOfOrderDateTimes =
            "The DateStart property must come before the DateEnd property.";

        public static string Argument_PathEmpty = "Path cannot be the empty string or all whitespace.";

        public static string Argument_ParameterHasUnmatchedArgumentValue =
            "Value of argument {0} does not match parameter type: {1} -> {2}.";

        public static string Argument_ParameterInvalidType = "Parameter {0} does not have a valid type.";

        public static string Argument_ParameterInvalidValue = "Parameter {0} is not a valid value.";

        public static string Argument_TypeParseError = "Could not parse the type name.";

        public static string Argument_PreAllocatedAlreadyAllocated = "\'preAllocated\' is already in use.";

        public static string Argument_RecursiveFallback =
            "Recursive fallback not allowed for character \\\\u{0:X4}.";

        public static string Argument_RecursiveFallbackBytes = "Recursive fallback not allowed for bytes {0}.";

        public static string Argument_RedefinedLabel = "Label multiply defined.";

        public static string Argument_ResolveField =
            "Token {0:x} is not a valid FieldInfo token in the scope of module {1}.";

        public static string Argument_ResolveFieldHandle =
            "Type handle \'{0}\' and field handle with declaring type \'{1}\' are incompatible. Ge" +
            "t RuntimeFieldHandle and declaring RuntimeTypeHandle off the same FieldInfo.";

        public static string Argument_ResolveMember =
            "Token {0:x} is not a valid MemberInfo token in the scope of module {1}.";

        public static string Argument_ResolveMethod =
            "Token {0:x} is not a valid MethodBase token in the scope of module {1}.";

        public static string Argument_ResolveMethodHandle =
            "Type handle \'{0}\' and method handle with declaring type \'{1}\' are incompatible. G" +
            "et RuntimeMethodHandle and declaring RuntimeTypeHandle off the same MethodBase.";

        public static string Argument_ResolveModuleType =
            "Token {0} resolves to the special module type representing this module.";

        public static string Argument_ResolveString =
            "Token {0:x} is not a valid string token in the scope of module {1}.";

        public static string Argument_ResolveType =
            "Token {0:x} is not a valid Type token in the scope of module {1}.";

        public static string Argument_ResultCalendarRange =
            "The result is out of the supported range for this calendar. The result should be " +
            "between {0} (Gregorian date) and {1} (Gregorian date), inclusive.";

        public static string Argument_SemaphoreInitialMaximum =
            "The initial count for the semaphore must be greater than or equal to zero and les" +
            "s than the maximum count.";

        public static string Argument_ShouldNotSpecifyExceptionType =
            "Should not specify exception type for catch clause for filter block.";

        public static string Argument_ShouldOnlySetVisibilityFlags =
            "Should only set visibility flags when creating EnumBuilder.";

        public static string Argument_SigIsFinalized = "Completed signature cannot be modified.";

        public static string Argument_StreamNotReadable = "Stream was not readable.";

        public static string Argument_StreamNotWritable = "Stream was not writable.";

        public static string Argument_StringFirstCharIsZero = "The first char in the string is the null character.";

        public static string Argument_StructMustNotBeValueClass = "The structure must not be a value class.";

        public static string Argument_TimeSpanHasSeconds =
            "The TimeSpan parameter cannot be specified more precisely than whole minutes.";

        public static string Argument_TimeZoneInfoBadTZif =
            "The tzfile does not begin with the magic characters \'TZif\'.  Please verify that t" +
            "he file is not corrupt.";

        public static string Argument_TimeZoneInfoInvalidTZif = "The TZif data structure is corrupt.";

        public static string Argument_ToExclusiveLessThanFromExclusive =
            "fromInclusive must be less than or equal to toExclusive.";

        public static string Argument_TooManyFinallyClause =
            "Exception blocks may have at most one finally clause.";

        public static string Argument_TransitionTimesAreIdentical =
            "The DaylightTransitionStart property must not equal the DaylightTransitionEnd pro" +
            "perty.";

        public static string Argument_TypedReferenceInvalidField =
            "Field \'{0}\' in TypedReferences cannot be static.";

        public static string Argument_TypeMustBeVisibleFromCom = "The specified type must be visible from COM.";

        public static string Argument_TypeMustNotBeComImport = "The type must not be imported from COM.";

        public static string Argument_TypeNameTooLong =
            "Type name was too long. The fully qualified type name must be less than 1,024 cha" +
            "racters.";

        public static string Argument_TypeNotComObject =
            "The type must be __ComObject or be derived from __ComObject.";

        public static string Argument_UnclosedAssemblyQualifiedTypeName =
            "Unclosed assembly-qualified type name at \'{0}\'.";

        public static string Argument_UnclosedExceptionBlock =
            "The IL Generator cannot be used while there are unclosed exceptions.";

        public static string Argument_UnknownUnmanagedCallConv =
            "Unknown unmanaged calling convention for function signature.";

        public static string Argument_UnmanagedMemAccessorWrapAround =
            "The UnmanagedMemoryAccessor capacity and offset would wrap around the high end of" +
            " the address space.";

        public static string Argument_UnmanagedTypeOnlyValidOnFields =
            "Specified unmanaged type is only valid on fields.";

        public static string Argument_UnmatchedFieldValueAndType =
            "Value of field \'{0}\' does not match field type \'{1}\'.";

        public static string Argument_UnmatchedMethodForLocal =
            "Local passed in does not belong to this ILGenerator.";

        public static string Argument_UnmatchedSquareBracketWhileParsingGenericArgAssemblyName =
            "Unmatched \']\' while parsing generic argument assembly name.";

        public static string Argument_UnmatchingSymScope = "Non-matching symbol scope.";

        public static string Argument_UTCOutOfRange =
            "The UTC time represented when the offset is applied must be between year 0 and 10" +
            ",000.";

        public static string Argument_WaitHandleNameTooLong = "The length of the name exceeds the maximum limit.";

        public static string ArgumentException_BadMethodImplBody = "MethodOverride\'s body must be from this type.";

        public static string ArgumentException_BufferNotFromPool =
            "The buffer is not associated with this pool and may not be returned to it.";

        public static string ArgumentException_OtherNotArrayOfCorrectLength =
            "The object is not an array with the same number of elements as the array to compa" +
            "re it to.";

        public static string ArgumentException_NotIsomorphic = "Object contains references.";

        public static string ArgumentException_TupleIncorrectType = "Argument must be of type {0}.";

        public static string ArgumentException_TupleLastArgumentNotATuple =
            "The last element of an eight element tuple must be a Tuple.";

        public static string ArgumentException_ValueTupleIncorrectType = "Argument must be of type {0}.";

        public static string ArgumentException_ValueTupleLastArgumentNotAValueTuple =
            "The last element of an eight element ValueTuple must be a ValueTuple.";

        public static string ArgumentNull_Array = "Array cannot be null.";

        public static string ArgumentNull_ArrayElement = "At least one element in the specified array was null.";

        public static string ArgumentNull_ArrayValue = "Found a null value within an array.";

        public static string ArgumentNull_Assembly = "Assembly cannot be null.";

        public static string ArgumentNull_AssemblyName = "AssemblyName cannot be null.";

        public static string ArgumentNull_AssemblyNameName = "AssemblyName.Name cannot be null or an empty string.";

        public static string ArgumentNull_Buffer = "Buffer cannot be null.";

        public static string ArgumentNull_Child = "Cannot have a null child.";

        public static string ArgumentNull_FileName = "File name cannot be null.";

        public static string ArgumentNull_Generic = "Value cannot be null.";

        public static string ArgumentNull_SafeHandle = "SafeHandle cannot be null.";

        public static string ArgumentNull_String = "String reference not set to an instance of a String.";

        public static string ArgumentNull_Type = "Type cannot be null.";

        public static string ArgumentNull_TypedRefType = "Type in TypedReference cannot be null.";

        public static string ArgumentOutOfRange_ActualValue = "Actual value was {0}.";

        public static string ArgumentOutOfRange_AddressSpace =
            "The number of bytes cannot exceed the virtual address space on a 32 bit machine.";

        public static string ArgumentOutOfRange_AddValue = "Value to add was out of range.";

        public static string ArgumentOutOfRange_ArrayLB =
            "Number was less than the array\'s lower bound in the first dimension.";

        public static string ArgumentOutOfRange_ArrayLBAndLength =
            "Higher indices will exceed Int32.MaxValue because of large lower bound and/or len" +
            "gth.";

        public static string ArgumentOutOfRange_BadHourMinuteSecond =
            "Hour, Minute, and Second parameters describe an un-representable DateTime.";

        public static string ArgumentOutOfRange_BadYearMonthDay =
            "Year, Month, and Day parameters describe an un-representable DateTime.";

        public static string ArgumentOutOfRange_BiggerThanCollection = "Larger than collection size.";

        public static string ArgumentOutOfRange_BinaryReaderFillBuffer =
            "The number of bytes requested does not fit into BinaryReader\'s internal buffer.";

        public static string ArgumentOutOfRange_Bounds_Lower_Upper = "Argument must be between {0} and {1}.";

        public static string ArgumentOutOfRange_CalendarRange =
            "Specified time is not supported in this calendar. It should be between {0} (Grego" +
            "rian date) and {1} (Gregorian date), inclusive.";

        public static string ArgumentOutOfRange_Capacity = "Capacity exceeds maximum capacity.";

        public static string ArgumentOutOfRange_Count =
            "Count must be positive and count must refer to a location within the string/array" +
            "/collection.";

        public static string ArgumentOutOfRange_DateArithmetic =
            "The added or subtracted value results in an un-representable DateTime.";

        public static string ArgumentOutOfRange_DateTimeBadMonths = "Months value must be between +/-120000.";

        public static string ArgumentOutOfRange_DateTimeBadTicks =
            "Ticks must be between DateTime.MinValue.Ticks and DateTime.MaxValue.Ticks.";

        public static string ArgumentOutOfRange_TimeOnlyBadTicks =
            "Ticks must be between 0 and and TimeOnly.MaxValue.Ticks.";

        public static string ArgumentOutOfRange_DateTimeBadYears = "Years value must be between +/-10000.";

        public static string ArgumentOutOfRange_Day = "Day must be between 1 and {0} for month {1}.";

        public static string ArgumentOutOfRange_DayOfWeek =
            "The DayOfWeek enumeration must be in the range 0 through 6.";

        public static string ArgumentOutOfRange_DayParam = "The Day parameter must be in the range 1 through 31.";

        public static string ArgumentOutOfRange_DecimalRound =
            "Decimal can only round to between 0 and 28 digits of precision.";

        public static string ArgumentOutOfRange_DecimalScale =
            "Decimal\'s scale value must be between 0 and 28, inclusive.";

        public static string ArgumentOutOfRange_EndIndexStartIndex = "endIndex cannot be greater than startIndex.";

        public static string ArgumentOutOfRange_Enum = "Enum value was out of legal range.";

        public static string ArgumentOutOfRange_Era = "Time value was out of era range.";

        public static string ArgumentOutOfRange_FileLengthTooBig =
            "Specified file length was too large for the file system.";

        public static string ArgumentOutOfRange_FileTimeInvalid = "Not a valid Win32 FileTime.";

        public static string ArgumentOutOfRange_GetByteCountOverflow =
            "Too many characters. The resulting number of bytes is larger than what can be ret" +
            "urned as an int.";

        public static string ArgumentOutOfRange_GetCharCountOverflow =
            "Too many bytes. The resulting number of chars is larger than what can be returned" +
            " as an int.";

        public static string ArgumentOutOfRange_HashtableLoadFactor =
            "Load factor needs to be between 0.1 and 1.0.";

        public static string ArgumentOutOfRange_HugeArrayNotSupported = "Arrays larger than 2GB are not supported.";

        public static string ArgumentOutOfRange_IndexMustBeLess =
            "Index was out of range. Must be non-negative and less than the size of the collec" +
            "tion.";

        public static string ArgumentOutOfRange_IndexMustBeLessOrEqual =
            "Index was out of range. Must be non-negative and less than or equal to the size o" +
            "f the collection.";

        public static string ArgumentOutOfRange_IndexCount =
            "Index and count must refer to a location within the string.";

        public static string ArgumentOutOfRange_IndexCountBuffer =
            "Index and count must refer to a location within the buffer.";

        public static string ArgumentOutOfRange_IndexLength =
            "Index and length must refer to a location within the string.";

        public static string ArgumentOutOfRange_IndexString =
            "Index was out of range. Must be non-negative and less than the length of the stri" +
            "ng.";

        public static string ArgumentOutOfRange_InputTooLarge = "Input is too large to be processed.";

        public static string ArgumentOutOfRange_InvalidEraValue = "Era value was not valid.";

        public static string ArgumentOutOfRange_InvalidHighSurrogate =
            "A valid high surrogate character is between 0xd800 and 0xdbff, inclusive.";

        public static string ArgumentOutOfRange_InvalidLowSurrogate =
            "A valid low surrogate character is between 0xdc00 and 0xdfff, inclusive.";

        public static string ArgumentOutOfRange_InvalidUTF32 =
            "A valid UTF32 value is between 0x000000 and 0x10ffff, inclusive, and should not i" +
            "nclude surrogate codepoint values (0x00d800 ~ 0x00dfff).";

        public static string ArgumentOutOfRange_Length =
            "The specified length exceeds maximum capacity of SecureString.";

        public static string ArgumentOutOfRange_LengthGreaterThanCapacity =
            "The length cannot be greater than the capacity.";

        public static string ArgumentOutOfRange_LengthTooLarge =
            "The specified length exceeds the maximum value of {0}.";

        public static string ArgumentOutOfRange_LessEqualToIntegerMaxVal =
            "Argument must be less than or equal to 2^31 - 1 milliseconds.";

        public static string ArgumentOutOfRange_ListInsert = "Index must be within the bounds of the List.";

        public static string ArgumentOutOfRange_Month = "Month must be between one and twelve.";

        public static string ArgumentOutOfRange_DayNumber =
            "Day number must be between 0 and DateOnly.MaxValue.DayNumber.";

        public static string ArgumentOutOfRange_MonthParam =
            "The Month parameter must be in the range 1 through 12.";

        public static string ArgumentOutOfRange_MustBeNonNegInt32 =
            "Value must be non-negative and less than or equal to Int32.MaxValue.";

        public static string ArgumentOutOfRange_MustBeNonNegNum = "\'{0}\' must be non-negative.";

        public static string ArgumentOutOfRange_MustBePositive = "\'{0}\' must be greater than zero.";

        public static string ArgumentOutOfRange_NeedNonNegNum = "Non-negative number required.";

        public static string ArgumentOutOfRange_NeedNonNegOrNegative1 =
            "Number must be either non-negative and less than or equal to Int32.MaxValue or -1" +
            ".";

        public static string ArgumentOutOfRange_NeedPosNum = "Positive number required.";

        public static string ArgumentOutOfRange_NeedValidId =
            "The ID parameter must be in the range {0} through {1}.";

        public static string ArgumentOutOfRange_OffsetLength =
            "Offset and length must refer to a position in the string.";

        public static string ArgumentOutOfRange_OffsetOut =
            "Either offset did not refer to a position in the string, or there is an insuffici" +
            "ent length of destination character array.";

        public static string ArgumentOutOfRange_ParamSequence = "The specified parameter index is not in range.";

        public static string ArgumentOutOfRange_PartialWCHAR =
            "Pointer startIndex and length do not refer to a valid string.";

        public static string ArgumentOutOfRange_PositionLessThanCapacityRequired =
            "The position may not be greater or equal to the capacity of the accessor.";

        public static string ArgumentOutOfRange_Range = "Valid values are between {0} and {1}, inclusive.";

        public static string ArgumentOutOfRange_RoundingDigits =
            "Rounding digits must be between 0 and 15, inclusive.";

        public static string ArgumentOutOfRange_RoundingDigits_MathF =
            "Rounding digits must be between 0 and 6, inclusive.";

        public static string ArgumentOutOfRange_SmallCapacity = "capacity was less than the current size.";

        public static string ArgumentOutOfRange_StartIndex = "StartIndex cannot be less than zero.";

        public static string ArgumentOutOfRange_StartIndexLargerThanLength =
            "startIndex cannot be larger than length of string.";

        public static string ArgumentOutOfRange_StreamLength =
            "Stream length must be non-negative and less than 2^31 - 1 - origin.";

        public static string ArgumentOutOfRange_UIntPtrMax =
            "The length of the buffer must be less than the maximum UIntPtr value for your pla" +
            "tform.";

        public static string ArgumentOutOfRange_UnmanagedMemStreamLength =
            "UnmanagedMemoryStream length must be non-negative and less than 2^63 - 1 - baseAd" +
            "dress.";

        public static string ArgumentOutOfRange_UnmanagedMemStreamWrapAround =
            "The UnmanagedMemoryStream capacity would wrap around the high end of the address " +
            "space.";

        public static string ArgumentOutOfRange_UtcOffset =
            "The TimeSpan parameter must be within plus or minus 14.0 hours.";

        public static string ArgumentOutOfRange_UtcOffsetAndDaylightDelta =
            "The sum of the BaseUtcOffset and DaylightDelta properties must within plus or min" +
            "us 14.0 hours.";

        public static string ArgumentOutOfRange_Week = "The Week parameter must be in the range 1 through 5.";

        public static string ArgumentOutOfRange_Year = "Year must be between 1 and 9999.";

        public static string ArgumentOutOfRange_Generic_MustBeNonZero = "{0} (\'{1}\') must be a non-zero value.";

        public static string ArgumentOutOfRange_Generic_MustBeNonNegative =
            "{0} (\'{1}\') must be a non-negative value.";

        public static string ArgumentOutOfRange_Generic_MustBeNonNegativeNonZero =
            "{0} (\'{1}\') must be a non-negative and non-zero value.";

        public static string ArgumentOutOfRange_Generic_MustBeLessOrEqual =
            "{0} (\'{1}\') must be less than or equal to \'{2}\'.";

        public static string ArgumentOutOfRange_Generic_MustBeLess = "{0} (\'{1}\') must be less than \'{2}\'.";

        public static string ArgumentOutOfRange_Generic_MustBeGreaterOrEqual =
            "{0} (\'{1}\') must be greater than or equal to \'{2}\'.";

        public static string ArgumentOutOfRange_Generic_MustBeGreater =
            "{0} (\'{1}\') must be greater than \'{2}\'.";

        public static string ArgumentOutOfRange_Generic_MustBeEqual = "{0} (\'{1}\') must be equal to \'{2}\'.";

        public static string ArgumentOutOfRange_Generic_MustBeNotEqual =
            "{0} (\'{1}\') must not be equal to \'{2}\'.";

        public static string Arithmetic_NaN = "Function does not accept floating point Not-a-Number values.";

        public static string ArrayTypeMismatch_CantAssignType =
            "Source array type cannot be assigned to destination array type.";

        public static string ArrayTypeMismatch_ConstrainedCopy =
            @"Array.ConstrainedCopy will only work on array types that are provably compatible, without any form of boxing, unboxing, widening, or casting of each array element.  Change the array types (i.e., copy a Derived[] to a Base[]), or use a mitigation strategy in the CER for Array.Copy's less powerful reliability contract, such as cloning the array or throwing away the potentially corrupt destination array.";

        public static string AssemblyLoadContext_Unload_CannotUnloadIfNotCollectible =
            "Cannot unload non-collectible AssemblyLoadContext.";

        public static string AssemblyLoadContext_Verify_NotUnloading =
            "AssemblyLoadContext is unloading or was already unloaded.";

        public static string AssertionFailed = "Assertion failed.";

        public static string AssertionFailed_Cnd = "Assertion failed: {0}";

        public static string AssumptionFailed = "Assumption failed.";

        public static string AssumptionFailed_Cnd = "Assumption failed: {0}";

        public static string AsyncMethodBuilder_InstanceNotInitialized =
            "The builder was not properly initialized.";

        public static string BadImageFormat_BadILFormat = "Bad IL format.";

        public static string BadImageFormat_InvalidType =
            "Corrupt .resources file.  The specified type doesn\'t exist.";

        public static string BadImageFormat_NegativeStringLength =
            "Corrupt .resources file. String length must be non-negative.";

        public static string BadImageFormat_ParameterSignatureMismatch =
            "The parameters and the signature of the method don\'t match.";

        public static string BadImageFormat_ResType_SerBlobMismatch =
            "The type serialized in the .resources file was not the same type that the .resour" +
            "ces file said it contained. Expected \'{0}\' but read \'{1}\'.";

        public static string BadImageFormat_ResourceDataLengthInvalid =
            "Corrupt .resources file.  The specified data length \'{0}\' is not a valid position" +
            " in the stream.";

        public static string BadImageFormat_ResourceNameCorrupted =
            "Corrupt .resources file. A resource name extends past the end of the stream.";

        public static string BadImageFormat_ResourceNameCorrupted_NameIndex =
            "Corrupt .resources file. The resource name for name index {0} extends past the en" +
            "d of the stream.";

        public static string BadImageFormat_ResourcesDataInvalidOffset =
            "Corrupt .resources file. Invalid offset \'{0}\' into data section.";

        public static string BadImageFormat_ResourcesHeaderCorrupted =
            "Corrupt .resources file. Unable to read resources from this file because of inval" +
            "id header information. Try regenerating the .resources file.";

        public static string BadImageFormat_ResourcesIndexTooLong =
            "Corrupt .resources file. String for name index \'{0}\' extends past the end of the " +
            "file.";

        public static string BadImageFormat_ResourcesNameInvalidOffset =
            "Corrupt .resources file. Invalid offset \'{0}\' into name section.";

        public static string BadImageFormat_ResourcesNameTooLong =
            "Corrupt .resources file. Resource name extends past the end of the file.";

        public static string BadImageFormat_TypeMismatch =
            "Corrupt .resources file.  The specified type doesn\'t match the available data in " +
            "the stream.";

        public static string CancellationToken_CreateLinkedToken_TokensIsEmpty = "No tokens were supplied.";

        public static string CancellationTokenSource_Disposed = "The CancellationTokenSource has been disposed.";

        public static string ConcurrentCollection_SyncRoot_NotSupported =
            "The SyncRoot property may not be used for the synchronization of concurrent colle" +
            "ctions.";

        public static string CustomMarshaler_MultipleGetInstanceMethods =
            "Custom marshaler \'{0}\' implements multiple static GetInstance methods that take a" +
            " single string parameter.";

        public static string CustomMarshaler_NoGetInstanceMethod =
            "Custom marshaler \'{0}\' does not implement a static GetInstance method that takes " +
            "a single string parameter and returns an ICustomMarshaler.";

        public static string CustomMarshaler_UnassignedGenericParams =
            "Custom marshaler \'{0}\' contains unassigned generic type parameter(s).";

        public static string CustomMarshaler_NullReturnForGetInstance =
            "A call to GetInstance() for custom marshaler \'{0}\' returned null, which is not al" +
            "lowed.";

        public static string EventSource_AbstractMustNotDeclareEventMethods =
            "Abstract event source must not declare event methods ({0} with ID {1}).";

        public static string EventSource_AbstractMustNotDeclareKTOC =
            "Abstract event source must not declare {0} nested type.";

        public static string EventSource_AddScalarOutOfRange = "Getting out of bounds during scalar addition.";

        public static string EventSource_BadHexDigit = "Bad Hexidecimal digit \"{0}\".";

        public static string EventSource_ChannelTypeDoesNotMatchEventChannelValue =
            "Channel {0} does not match event channel value {1}.";

        public static string EventSource_CouldNotEnableEventPipe =
            "Failed to open an EventPipe session for NativeRuntimeEventSource.";

        public static string EventSource_DataDescriptorsOutOfRange = "Data descriptors are out of range.";

        public static string EventSource_DuplicateStringKey = "Multiple definitions for string \"{0}\".";

        public static string EventSource_EnumKindMismatch = "The type of {0} is not expected in {1}.";

        public static string EventSource_EvenHexDigits = "Must have an even number of Hexidecimal digits.";

        public static string EventSource_EventChannelOutOfRange =
            "Channel {0} has a value of {1} which is outside the legal range (16-254).";

        public static string EventSource_EventIdReused = "Event {0} has ID {1} which is already in use.";

        public static string EventSource_EventMustHaveTaskIfNonDefaultOpcode =
            "Event {0} (with ID {1}) has a non-default opcode but not a task.";

        public static string EventSource_EventMustNotBeExplicitImplementation =
            "Event method {0} (with ID {1}) is an explicit interface method implementation. Re" +
            "-write method as implicit implementation.";

        public static string EventSource_EventNameDoesNotEqualTaskPlusOpcode =
            "Event {0} (with ID {1}) has a name that is not the concatenation of its task name" +
            " and opcode.";

        public static string EventSource_EventNameReused =
            "Event name {0} used more than once.  If you wish to overload a method, the overlo" +
            "aded method should have a NonEvent attribute.";

        public static string EventSource_EventParametersMismatch =
            "Event {0} was called with {1} argument(s), but it is defined with {2} parameter(s" +
            ").";

        public static string EventSource_EventSourceGuidInUse =
            "An instance of EventSource with Guid {0} already exists.";

        public static string EventSource_EventTooBig = "The payload for a single event is too large.";

        public static string EventSource_EventWithAdminChannelMustHaveMessage =
            "Event {0} specifies an Admin channel {1}. It must specify a Message property.";

        public static string EventSource_IllegalKeywordsValue =
            "Keyword {0} has a value of {1} which is outside the legal range (0-0x000008000000" +
            "0000).";

        public static string EventSource_IllegalOpcodeValue =
            "Opcode {0} has a value of {1} which is outside the legal range (11-238).";

        public static string EventSource_IllegalTaskValue =
            "Task {0} has a value of {1} which is outside the legal range (1-65535).";

        public static string EventSource_IllegalValue =
            "Illegal value \"{0}\" (prefix strings with @ to indicate a literal string).";

        public static string EventSource_IncorrentlyAuthoredTypeInfo =
            "Incorrectly-authored TypeInfo - a type should be serialized as one field or as on" +
            "e group";

        public static string EventSource_InvalidCommand = "Invalid command value.";

        public static string EventSource_InvalidEventFormat = "Can\'t specify both etw event format flags.";

        public static string EventSource_KeywordCollision =
            "Keywords {0} and {1} are defined with the same value ({2}).";

        public static string EventSource_KeywordNeedPowerOfTwo =
            "Value {0} for keyword {1} needs to be a power of 2.";

        public static string EventSource_ListenerCreatedInsideCallback =
            "Creating an EventListener inside a EventListener callback.";

        public static string EventSource_ListenerNotFound = "Listener not found.";

        public static string EventSource_ListenerWriteFailure = "An error occurred when writing to a listener.";

        public static string EventSource_MaxChannelExceeded =
            "Attempt to define more than the maximum limit of 8 channels for a provider.";

        public static string EventSource_MismatchIdToWriteEvent =
            "Event {0} was assigned event ID {1} but {2} was passed to WriteEvent.";

        public static string EventSource_NeedGuid = "The Guid of an EventSource must be non zero.";

        public static string EventSource_NeedName = "The name of an EventSource must not be null.";

        public static string EventSource_NeedPositiveId = "Event IDs must be positive integers.";

        public static string EventSource_NoFreeBuffers =
            "No Free Buffers available from the operating system (e.g. event rate too fast).";

        public static string EventSource_NonCompliantTypeError =
            "The API supports only anonymous types or types decorated with the EventDataAttrib" +
            "ute. Non-compliant type: {0} dataType.";

        public static string EventSource_NoRelatedActivityId =
            "EventSource expects the first parameter of the Event method to be of type Guid an" +
            "d to be named \"relatedActivityId\" when calling WriteEventWithRelatedActivityId.";

        public static string EventSource_NotSupportedArrayOfBinary = "Arrays of Binary are not supported.";

        public static string EventSource_NotSupportedArrayOfNil = "Arrays of Nil are not supported.";

        public static string EventSource_NotSupportedArrayOfNullTerminatedString =
            "Arrays of null-terminated string are not supported.";

        public static string EventSource_NotSupportedCustomSerializedData =
            "Enumerables of custom-serialized data are not supported";

        public static string EventSource_NotSupportedNestedArraysEnums =
            "Nested arrays/enumerables are not supported.";

        public static string EventSource_NullInput = "Null passed as a event argument.";

        public static string EventSource_OpcodeCollision =
            "Opcodes {0} and {1} are defined with the same value ({2}).";

        public static string EventSource_PinArrayOutOfRange = "Pins are out of range.";

        public static string EventSource_RecursiveTypeDefinition = "Recursive type definition is not supported.";

        public static string EventSource_StopsFollowStarts =
            "An event with stop suffix must follow a corresponding event with a start suffix.";

        public static string EventSource_TaskCollision = "Tasks {0} and {1} are defined with the same value ({2}).";

        public static string EventSource_TaskOpcodePairReused =
            "Event {0} (with ID {1}) has the same task/opcode pair as event {2} (with ID {3})." +
            "";

        public static string EventSource_TooManyArgs = "Too many arguments.";

        public static string EventSource_TooManyFields = "Too many fields in structure.";

        public static string EventSource_ToString = "EventSource({0}, {1})";

        public static string EventSource_TraitEven =
            "There must be an even number of trait strings (they are key-value pairs).";

        public static string EventSource_TypeMustBeSealedOrAbstract =
            "Event source types must be sealed or abstract.";

        public static string EventSource_TypeMustDeriveFromEventSource =
            "Event source types must derive from EventSource.";

        public static string EventSource_UndefinedChannel = "Use of undefined channel value {0} for event {1}.";

        public static string EventSource_UndefinedKeyword = "Use of undefined keyword value {0} for event {1}.";

        public static string EventSource_UndefinedOpcode = "Use of undefined opcode value {0} for event {1}.";

        public static string EventSource_UnknownEtwTrait = "Unknown ETW trait \"{0}\".";

        public static string EventSource_UnsupportedEventTypeInManifest = "Unsupported type {0} in event source.";

        public static string EventSource_UnsupportedMessageProperty =
            "Event {0} specifies an illegal or unsupported formatting message (\"{1}\").";

        public static string EventSource_VarArgsParameterMismatch =
            "Event {0} was called with a different type as defined (argument \"{1}\"). This may " +
            "cause the event to be displayed incorrectly.";

        public static string Exception_EmptyFieldForCustomAttributeType =
            "Custom attribute type \'{0}\' doesn\'t contain a field named \'{1}\'.";

        public static string Exception_EndOfInnerExceptionStack = "--- End of inner exception stack trace ---";

        public static string Exception_EndStackTraceFromPreviousThrow =
            "--- End of stack trace from previous location ---";

        public static string Exception_InvalidCustomAttributeLength = "Custom attribute length is only \'{0}\'.";

        public static string Exception_InvalidProlog = "Prolog invalid.";

        public static string Exception_UnknownNamedType = "Unknown named type \'{0}\'.";

        public static string Exception_UnknownMarshalAsAttributeField = "Unknown MarshalAsAttribute field \'{0}\'.";

        public static string Exception_UnhandledSubType = "Subtype \'{0}\' of type object not yet handled.";

        public static string Exception_WasThrown = "Exception of type \'{0}\' was thrown.";

        public static string ExecutionContext_ExceptionInAsyncLocalNotification =
            "An exception was not handled in an AsyncLocal<T> notification callback.";

        public static string FileNotFound_ResolveAssembly = "Could not resolve assembly \'{0}\'.";

        public static string FileNotFound_LoadFile =
            "Could not load file or assembly \'{0}\'. The system cannot find the file specified." +
            "";

        public static string Format_AttributeUsage =
            "Duplicate AttributeUsageAttribute found on attribute type {0}.";

        public static string Format_Bad7BitInt = "Too many bytes in what should have been a 7-bit encoded integer.";

        public static string Format_BadBase = "Invalid digits for the specified base.";

        public static string Format_BadBase64Char =
            "The input is not a valid Base-64 string as it contains a non-base 64 character, m" +
            "ore than two padding characters, or an illegal character among the padding chara" +
            "cters.";

        public static string Format_BadBoolean = "String \'{0}\' was not recognized as a valid Boolean.";

        public static string Format_BadDatePattern =
            "Could not determine the order of year, month, and date from \'{0}\'.";

        public static string Format_BadDateTime = "String \'{0}\' was not recognized as a valid DateTime.";

        public static string Format_BadDateOnly = "String \'{0}\' was not recognized as a valid DateOnly.";

        public static string Format_BadTimeOnly = "String \'{0}\' was not recognized as a valid TimeOnly.";

        public static string Format_DateTimeOnlyContainsNoneDateParts =
            "String \'{0}\' contains parts which are not specific to the {1}.";

        public static string Format_BadDateTimeCalendar =
            "The DateTime represented by the string \'{0}\' is not supported in calendar \'{1}\'.";

        public static string Format_BadDayOfWeek =
            "String \'{0}\' was not recognized as a valid DateTime because the day of week was i" +
            "ncorrect.";

        public static string Format_BadFormatSpecifier = "Format specifier \'{0}\' was invalid.";

        public static string Format_NoFormatSpecifier = "No format specifiers were provided.";

        public static string Format_BadHexChar =
            "The input is not a valid hex string as it contains a non-hex character.";

        public static string Format_BadHexLength =
            "The input is not a valid hex string as its length is not a multiple of 2.";

        public static string Format_BadQuote = "Cannot find a matching quote character for the character \'{0}\'.";

        public static string Format_BadTimeSpan = "String \'{0}\' was not recognized as a valid TimeSpan.";

        public static string Format_DateOutOfRange =
            "The DateTime represented by the string \'{0}\' is out of range.";

        public static string Format_EmptyInputString =
            "Input string was either empty or contained only whitespace.";

        public static string Format_ExtraJunkAtEnd =
            "Additional non-parsable characters are at the end of the string.";

        public static string Format_GuidBrace = "Expected {0xdddddddd, etc}.";

        public static string Format_GuidBraceAfterLastNumber =
            "Could not find a brace, or the length between the previous token and the brace wa" +
            "s zero (i.e., \'0x,\'etc.).";

        public static string Format_GuidComma =
            "Could not find a comma, or the length between the previous token and the comma wa" +
            "s zero (i.e., \'0x,\'etc.).";

        public static string Format_GuidDashes = "Dashes are in the wrong position for GUID parsing.";

        public static string Format_GuidEndBrace = "Could not find the ending brace.";

        public static string Format_GuidHexPrefix = "Expected 0x prefix.";

        public static string Format_GuidInvalidChar = "Guid string should only contain hexadecimal characters.";

        public static string Format_GuidInvLen =
            "Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" +
            ").";

        public static string Format_GuidUnrecognized = "Unrecognized Guid format.";

        public static string Format_IndexOutOfRange =
            "Index (zero based) must be greater than or equal to zero and less than the size o" +
            "f the argument list.";

        public static string Format_InvalidEnumFormatSpecification =
            "Format string can be only \"G\", \"g\", \"X\", \"x\", \"F\", \"f\", \"D\" or \"d\".";

        public static string Format_InvalidGuidFormatSpecification =
            "Format string can be only \"D\", \"d\", \"N\", \"n\", \"P\", \"p\", \"B\", \"b\", \"X\" or \"x\".";

        public static string Format_InvalidString = "Input string was not in a correct format.";

        public static string Format_InvalidStringWithValue =
            "The input string \'{0}\' was not in a correct format.";

        public static string Format_InvalidStringWithOffsetAndReason =
            "Input string was not in a correct format. Failure to parse near offset {0}. {1}";

        public static string Format_UnexpectedClosingBrace =
            "Unexpected closing brace without a corresponding opening brace.";

        public static string Format_UnclosedFormatItem = "Format item ends prematurely.";

        public static string Format_ExpectedAsciiDigit = "Expected an ASCII digit.";

        public static string Format_MissingIncompleteDate =
            "There must be at least a partial date with a year present in the input string \'{0" +
            "}\'.";

        public static string Format_NeedSingleChar = "String must be exactly one character long.";

        public static string Format_NoParsibleDigits = "Could not find any recognizable digits.";

        public static string Format_OffsetOutOfRange =
            "The time zone offset of string \'{0}\' must be within plus or minus 14 hours.";

        public static string Format_RepeatDateTimePattern =
            "DateTime pattern \'{0}\' appears more than once with different values.";

        public static string Format_StringZeroLength = "String cannot have zero length.";

        public static string Format_UnknownDateTimeWord =
            "The string \'{0}\' was not recognized as a valid DateTime. There is an unknown word" +
            " starting at index \'{1}\'.";

        public static string Format_UTCOutOfRange =
            "The UTC representation of the date \'{0}\' falls outside the year range 1-9999.";

        public static string Globalization_cp_1200 = "Unicode";

        public static string Globalization_cp_12000 = "Unicode (UTF-32)";

        public static string Globalization_cp_12001 = "Unicode (UTF-32 Big-Endian)";

        public static string Globalization_cp_1201 = "Unicode (Big-Endian)";

        public static string Globalization_cp_20127 = "US-ASCII";

        public static string Globalization_cp_28591 = "Western European (ISO)";

        public static string Globalization_cp_65000 = "Unicode (UTF-7)";

        public static string Globalization_cp_65001 = "Unicode (UTF-8)";

        public static string IndexOutOfRange_ArrayRankIndex = "Array does not have that many dimensions.";

        public static string IndexOutOfRange_UMSPosition =
            "Unmanaged memory stream position was beyond the capacity of the stream.";

        public static string InsufficientMemory_MemFailPoint =
            "Insufficient available memory to meet the expected demands of an operation at thi" +
            "s time.  Please try again later.";

        public static string InsufficientMemory_MemFailPoint_TooBig =
            "Insufficient memory to meet the expected demands of an operation, and this system" +
            " is likely to never satisfy this request.  If this is a 32 bit system, consider " +
            "booting in 3 GB mode.";

        public static string InsufficientMemory_MemFailPoint_VAFrag =
            "Insufficient available memory to meet the expected demands of an operation at thi" +
            "s time, possibly due to virtual address space fragmentation.  Please try again l" +
            "ater.";

        public static string Interop_COM_TypeMismatch = "Type mismatch between source and destination types.";

        public static string Interop_Marshal_Unmappable_Char = "Cannot marshal: Encountered unmappable character.";

        public static string Interop_Marshal_SafeHandle_InvalidOperation =
            "Structures containing SafeHandle fields are not allowed in this operation.";

        public static string Interop_Marshal_CannotCreateSafeHandleField =
            "SafeHandle fields cannot be created from an unmanaged handle.";

        public static string Interop_Marshal_CannotCreateCriticalHandleField =
            "CriticalHandle fields cannot be created from an unmanaged handle.";

        public static string InvalidCast_CannotCastNullToValueType =
            "Null object cannot be converted to a value type.";

        public static string InvalidCast_CannotCoerceByRefVariant =
            "Object cannot be coerced to the original type of the ByRef VARIANT it was obtaine" +
            "d from.";

        public static string InvalidCast_DBNull = "Object cannot be cast to DBNull.";

        public static string InvalidCast_DownCastArrayElement =
            "At least one element in the source array could not be cast down to the destinatio" +
            "n array type.";

        public static string InvalidCast_Empty = "Object cannot be cast to Empty.";

        public static string InvalidCast_FromDBNull = "Object cannot be cast from DBNull to other types.";

        public static string InvalidCast_FromTo = "Invalid cast from \'{0}\' to \'{1}\'.";

        public static string InvalidCast_IConvertible = "Object must implement IConvertible.";

        public static string InvalidCast_OATypeMismatch = "OleAut reported a type mismatch.";

        public static string InvalidCast_StoreArrayElement = "Object cannot be stored in an array of this type.";

        public static string InvalidOperation_AbstractMethod = "Type is concrete but has abstract method \'{0}\'.";

        public static string InvalidOperation_AsyncFlowCtrlCtxMismatch =
            "AsyncFlowControl objects can be used to restore flow only on a Context that had i" +
            "ts flow suppressed.";

        public static string InvalidOperation_AsyncIOInProgress =
            "The stream is currently in use by a previous operation on the stream.";

        public static string InvalidOperation_BadEmptyMethodBody = "Method \'{0}\' does not have a method body.";

        public static string InvalidOperation_BadILGeneratorUsage = "ILGenerator usage is invalid.";

        public static string InvalidOperation_BadInstructionOrIndexOutOfBound =
            "Opcodes using a short-form index cannot address a local position over 255.";

        public static string InvalidOperation_BadInterfaceNotAbstract = "Interface must be declared abstract.";

        public static string InvalidOperation_BadInterfaceNotAbstractAndVirtual =
            "Interface method must be abstract and virtual.";

        public static string InvalidOperation_BadMethodBody = "Method \'{0}\' cannot have a method body.";

        public static string InvalidOperation_BadTypeAttributesNotAbstract =
            "Type must be declared abstract if any of its methods are abstract.";

        public static string InvalidOperation_CalledTwice =
            "The method cannot be called twice on the same instance.";

        public static string InvalidOperation_CannotImportGlobalFromDifferentModule =
            "Unable to import a global method or field from a different module.";

        public static string InvalidOperation_CannotRegisterSecondResolver =
            "A resolver is already set for the assembly.";

        public static string InvalidOperation_CannotRestoreUnsuppressedFlow =
            "Cannot restore context flow when it is not suppressed.";

        public static string InvalidOperation_CannotUseAFCOtherThread =
            "AsyncFlowControl object must be used on the thread where it was created.";

        public static string InvalidOperation_CantInstantiateAbstractClass =
            "Instances of abstract classes cannot be created.";

        public static string InvalidOperation_CantInstantiateFunctionPointer =
            "Instances of function pointers cannot be created.";

        public static string InvalidOperation_CollectionCorrupted =
            "A prior operation on this collection was interrupted by an exception. Collection\'" +
            "s state is no longer trusted.";

        public static string InvalidOperation_ComputerName = "Computer name could not be obtained.";

        public static string InvalidOperation_ConcurrentOperationsNotSupported =
            "Operations that change non-concurrent collections must have exclusive access. A c" +
            "oncurrent update was performed on this collection and corrupted its state. The c" +
            "ollection\'s state is no longer correct.";

        public static string InvalidOperation_ConstructorNotAllowedOnInterface =
            "Interface cannot have constructors.";

        public static string InvalidOperation_DateTimeParsing =
            "Internal Error in DateTime and Calendar operations.";

        public static string InvalidOperation_DefaultConstructorILGen =
            "Unable to access ILGenerator on a constructor created with DefineDefaultConstruct" +
            "or.";

        public static string InvalidOperation_EnumEnded = "Enumeration already finished.";

        public static string InvalidOperation_EnumFailedVersion =
            "Collection was modified; enumeration operation may not execute.";

        public static string InvalidOperation_EnumNotStarted = "Enumeration has not started. Call MoveNext.";

        public static string InvalidOperation_EnumOpCantHappen =
            "Enumeration has either not started or has already finished.";

        public static string InvalidOperation_EventInfoNotAvailable = "This API does not support EventInfo tokens.";

        public static string InvalidOperation_GenericParametersAlreadySet =
            "The generic parameters are already defined on this MethodBuilder.";

        public static string InvalidOperation_GetVersion = "OSVersion\'s call to GetVersionEx failed.";

        public static string InvalidOperation_GlobalsHaveBeenCreated =
            "Type definition of the global function has been completed.";

        public static string InvalidOperation_HandleIsNotInitialized = "Handle is not initialized.";

        public static string InvalidOperation_HandleIsNotPinned = "Handle is not pinned.";

        public static string InvalidOperation_InvalidUtf8 =
            "Formatted string contains characters not representable as valid UTF-8.";

        public static string InvalidOperation_HashInsertFailed =
            "Hashtable insert failed. Load factor too high. The most common cause is multiple " +
            "threads writing to the Hashtable simultaneously.";

        public static string InvalidOperation_IComparerFailed = "Failed to compare two elements in the array.";

        public static string InvalidOperation_MethodBaked = "Type definition of the method is complete.";

        public static string InvalidOperation_MethodBuilderBaked =
            "The signature of the MethodBuilder can no longer be modified because an operation" +
            " on the MethodBuilder caused the methodDef token to be created. For example, a c" +
            "all to SetCustomAttribute requires the methodDef token to emit the CustomAttribu" +
            "te token.";

        public static string InvalidOperation_MethodHasBody = "Method already has a body.";

        public static string InvalidOperation_ModuleFieldsMethodsRelyOnCreateGlobalFunctionsMethod =
            "Module-level fields or methods cannot be retrieved until after the CreateGlobalFu" +
            "nctions method has been called for the module.";

        public static string InvalidOperation_MustCallInitialize =
            "You must call Initialize on this object instance before using it.";

        public static string InvalidOperation_NativeOverlappedReused =
            "NativeOverlapped cannot be reused for multiple operations.";

        public static string InvalidOperation_NestedControlledExecutionRun =
            "The thread is already executing the ControlledExecution.Run method.";

        public static string InvalidOperation_NoMultiModuleAssembly =
            "You cannot have more than one dynamic module in each dynamic assembly in this ver" +
            "sion of the runtime.";

        public static string InvalidOperation_NoPublicAddMethod =
            "Cannot add the event handler since no public add method exists for the event.";

        public static string InvalidOperation_NoPublicRemoveMethod =
            "Cannot remove the event handler since no public remove method exists for the even" +
            "t.";

        public static string InvalidOperation_NotADebugModule = "Not a debug ModuleBuilder.";

        public static string InvalidOperation_NotAllowedInDynamicMethod =
            "The requested operation is invalid for DynamicMethod.";

        public static string InvalidOperation_NotAVarArgCallingConvention = "Calling convention must be VarArgs.";

        public static string InvalidOperation_NotGenericType = "This operation is only valid on generic types.";

        public static string InvalidOperation_NotWithConcurrentGC =
            "This API is not available when the concurrent GC is enabled.";

        public static string InvalidOperation_NoUnderlyingTypeOnEnum =
            "Underlying type information on enumeration is not specified.";

        public static string InvalidOperation_NoValue = "Nullable object must have a value.";

        public static string InvalidOperation_NullArray = "The underlying array is null.";

        public static string InvalidOperation_NullContext = "Cannot call Set on a null context";

        public static string InvalidOperation_NullModuleHandle =
            "The requested operation is invalid when called on a null ModuleHandle.";

        public static string InvalidOperation_OpenLocalVariableScope =
            "Local variable scope was not properly closed.";

        public static string InvalidOperation_Overlapped_Pack = "Cannot pack a packed Overlapped again.";

        public static string InvalidOperation_PropertyInfoNotAvailable =
            "This API does not support PropertyInfo tokens.";

        public static string InvalidOperation_ReadOnly = "Instance is read-only.";

        public static string InvalidOperation_ResMgrBadResSet_Type =
            "\'{0}\': ResourceSet derived classes must provide a constructor that takes a String" +
            " file name and a constructor that takes a Stream.";

        public static string InvalidOperation_ResourceNotStream_Name =
            "Resource \'{0}\' was not a Stream - call GetObject instead.";

        public static string InvalidOperation_ResourceNotString_Name =
            "Resource \'{0}\' was not a String - call GetObject instead.";

        public static string InvalidOperation_ResourceNotString_Type =
            "Resource was of type \'{0}\' instead of String - call GetObject instead.";

        public static string InvalidOperation_SetLatencyModeNoGC =
            "The NoGCRegion mode is in progress.End it and then set a different mode.";

        public static string InvalidOperation_ShouldNotHaveMethodBody = "Method body should not exist.";

        public static string InvalidOperation_ThreadWrongThreadStart =
            "The thread was created with a ThreadStart delegate that does not accept a paramet" +
            "er.";

        public static string InvalidOperation_TimeoutsNotSupported = "Timeouts are not supported on this stream.";

        public static string InvalidOperation_TimerAlreadyClosed =
            "The Timer was already closed using an incompatible Dispose method.";

        public static string InvalidOperation_TypeCannotBeBoxed = "The given type cannot be boxed.";

        public static string InvalidOperation_TypeHasBeenCreated = "Unable to change after type has been created.";

        public static string InvalidOperation_TypeNotCreated = "Type has not been created.";

        public static string InvalidOperation_UnderlyingArrayListChanged =
            "This range in the underlying list is invalid. A possible cause is that elements w" +
            "ere removed.";

        public static string InvalidOperation_UnknownEnumType = "Unknown enum type.";

        public static string InvalidOperation_WrongAsyncResultOrEndCalledMultiple =
            "Either the IAsyncResult object did not come from the corresponding async method o" +
            "n this type, or the End method was called multiple times with the same IAsyncRes" +
            "ult.";

        public static string InvalidProgram_Default = "Common Language Runtime detected an invalid program.";

        public static string InvalidTimeZone_InvalidId = "The time zone ID \'{0}\' is invalid.";

        public static string InvalidTimeZone_InvalidFileData =
            "The time zone ID \'{0}\' was found on the local computer, but the file at \'{1}\' was" +
            " corrupt.";

        public static string InvalidTimeZone_InvalidRegistryData =
            "The time zone ID \'{0}\' was found on the local computer, but the registry informat" +
            "ion was corrupt.";

        public static string InvalidTimeZone_InvalidJulianDay = "Invalid Julian day in POSIX strings.";

        public static string InvalidTimeZone_NoTTInfoStructures =
            "There are no ttinfo structures in the tzfile.  At least one ttinfo structure is r" +
            "equired in order to construct a TimeZoneInfo object.";

        public static string InvalidTimeZone_UnparsablePosixMDateString =
            "\'{0}\' is not a valid POSIX-TZ-environment-variable MDate rule.  A valid rule has " +
            "the format \'Mm.w.d\'.";

        public static string InvariantFailed = "Invariant failed.";

        public static string InvariantFailed_Cnd = "Invariant failed: {0}";

        public static string IO_NoFileTableInInMemoryAssemblies =
            "This assembly does not have a file table because it was loaded from memory.";

        public static string IO_UnseekableFile = "Unsupported unseekable file.";

        public static string IO_EOF_ReadBeyondEOF = "Unable to read beyond the end of the stream.";

        public static string IO_FileLoad = "Could not load the specified file.";

        public static string IO_FileLoad_FileName = "Could not load the file \'{0}\'.";

        public static string IO_FileName_Name = "File name: \'{0}\'";

        public static string IO_FileNotFound = "Unable to find the specified file.";

        public static string IO_FileNotFound_FileName = "Could not find file \'{0}\'.";

        public static string IO_AlreadyExists_Name =
            "Cannot create \'{0}\' because a file or directory with the same name already exists" +
            ".";

        public static string IO_DiskFull_Path_AllocationSize =
            "Failed to create \'{0}\' with allocation size \'{1}\' because the disk was full.";

        public static string IO_FileTooLarge_Path_AllocationSize =
            "Failed to create \'{0}\' with allocation size \'{1}\' because the file was too large." +
            "";

        public static string IO_BindHandleFailed = "BindHandle for ThreadPool failed on this handle.";

        public static string IO_FileExists_Name = "The file \'{0}\' already exists.";

        public static string IO_FileStreamHandlePosition =
            "The OS handle\'s position is not what FileStream expected. Do not use a handle sim" +
            "ultaneously in one FileStream and in Win32 code or another FileStream. This may " +
            "cause data loss.";

        public static string IO_FileTooLong2GB =
            "The file is too long. This operation is currently limited to supporting files les" +
            "s than 2 gigabytes in size.";

        public static string IO_FileTooLong =
            "IO operation will not work. Most likely the file will become too long.";

        public static string IO_FileTooLongOrHandleNotSync =
            "IO operation will not work. Most likely the file will become too long or the hand" +
            "le was not opened to support synchronous IO operations.";

        public static string IO_FixedCapacity = "Unable to expand length of this stream beyond its capacity.";

        public static string IO_InvalidStringLen_Len =
            "BinaryReader encountered an invalid string length of {0} characters.";

        public static string IO_SeekAppendOverwrite =
            "Unable seek backward to overwrite data that previously existed in a file opened i" +
            "n Append mode.";

        public static string IO_SeekBeforeBegin =
            "An attempt was made to move the position before the beginning of the stream.";

        public static string IO_SetLengthAppendTruncate =
            "Unable to truncate data that previously existed in a file opened in Append mode.";

        public static string IO_SharingViolation_File =
            "The process cannot access the file \'{0}\' because it is being used by another proc" +
            "ess.";

        public static string IO_SharingViolation_NoFileName =
            "The process cannot access the file because it is being used by another process.";

        public static string IO_StreamTooLong = "Stream was too long.";

        public static string IO_PathNotFound_NoPathName = "Could not find a part of the path.";

        public static string IO_PathNotFound_Path = "Could not find a part of the path \'{0}\'.";

        public static string IO_PathTooLong =
            "The specified file name or path is too long, or a component of the specified path" +
            " is too long.";

        public static string IO_PathTooLong_Path =
            "The path \'{0}\' is too long, or a component of the specified path is too long.";

        public static string IO_TooManySymbolicLinkLevels = "Too many levels of symbolic links in \'{0}\'.";

        public static string IO_UnknownFileName = "[Unknown]";

        public static string IO_MaxAttemptsReached =
            "Unable to complete the operation after the maximum number of attempts.";

        public static string Lazy_CreateValue_NoParameterlessCtorForT =
            "The lazily-initialized type does not have a public, parameterless constructor.";

        public static string Lazy_ctor_ModeInvalid = "The mode argument specifies an invalid value.";

        public static string Lazy_StaticInit_InvalidOperation = "ValueFactory returned null.";

        public static string Lazy_ToString_ValueNotCreated = "Value is not created.";

        public static string Lazy_Value_RecursiveCallsToValue =
            "ValueFactory attempted to access the Value property of this instance.";

        public static string ManualResetEventSlim_ctor_TooManyWaiters =
            "There are too many threads currently waiting on the event. A maximum of {0} waiti" +
            "ng threads are supported.";

        public static string Marshaler_StringTooLong = "Marshaler restriction: Excessively long string.";

        public static string MissingConstructor_Name = "Constructor on type \'{0}\' not found.";

        public static string MissingField = "Field not found.";

        public static string MissingField_Name = "Field \'{0}.{1}\' not found.";

        public static string MissingManifestResource_MultipleBlobs =
            "A case-insensitive lookup for resource file \"{0}\" in assembly \"{1}\" found multipl" +
            "e entries. Remove the duplicates or specify the exact case.";

        public static string MissingManifestResource_NoNeutralAsm =
            "Could not find the resource \"{0}\" among the resources {2} embedded in the assembl" +
            "y \"{1}\", nor among the resources in any satellite assemblies for the specified c" +
            "ulture. Perhaps the resources were embedded with an incorrect name.";

        public static string MissingManifestResource_NoNeutralDisk =
            "Could not find any resources appropriate for the specified culture (or the neutra" +
            "l culture) on disk.";

        public static string MissingMember = "Member not found.";

        public static string MissingMember_Name = "Member \'{0}.{1}\' not found.";

        public static string MissingMemberNestErr = "TypedReference can only be made on nested value Types.";

        public static string MissingMemberTypeRef = "FieldInfo does not match the target Type.";

        public static string MissingMethod_Name = "Method \'{0}.{1}\' not found.";

        public static string MissingSatelliteAssembly_Culture_Name =
            "The satellite assembly named \"{1}\" for fallback culture \"{0}\" either could not be" +
            " found or could not be loaded. This is generally a setup problem. Please conside" +
            "r reinstalling or repairing the application.";

        public static string MissingSatelliteAssembly_Default =
            "Resource lookup fell back to the ultimate fallback resources in a satellite assem" +
            "bly, but that satellite either was not found or could not be loaded. Please cons" +
            "ider reinstalling or repairing the application.";

        public static string Multicast_Combine =
            "Delegates that are not of type MulticastDelegate may not be combined.";

        public static string MustUseCCRewrite =
            @"An assembly (probably ""{1}"") must be rewritten using the code contracts binary rewriter (CCRewrite) because it is calling Contract.{0} and the CONTRACTS_FULL symbol is defined.  Remove any explicit definitions of the CONTRACTS_FULL symbol from your project and rebuild.  CCRewrite can be downloaded from https://go.microsoft.com/fwlink/?LinkID=169180. \r\nAfter the rewriter is installed, it can be enabled in Visual Studio from the project's Properties page on the Code Contracts pane.  Ensure that ""Perform Runtime Contract Checking"" is enabled, which will define CONTRACTS_FULL.";

        public static string NotSupported_AbstractNonCLS = "This non-CLS method is not implemented.";

        public static string NotSupported_ActivAttr = "Activation Attributes are not supported.";

        public static string NotSupported_AssemblyLoadFromHash =
            "Assembly.LoadFrom with hashValue is not supported.";

        public static string NotSupported_ByRefLike = "Cannot create boxed ByRef-like values.";

        public static string NotSupported_ByRefLikeArray = "Cannot create arrays of ByRef-like values.";

        public static string CannotUseByRefLikeTypeInInstantiation =
            "Cannot instantiate a generic type on a ByRef-like type.";

        public static string NotSupported_ByRefToByRefLikeReturn =
            "ByRef to ByRef-like return values are not supported in reflection invocation.";

        public static string NotSupported_ByRefToVoidReturn =
            "ByRef to void return values are not supported in reflection invocation.";

        public static string NotSupported_CallToVarArg = "Vararg calling convention not supported.";

        public static string NotSupported_CannotCallEqualsOnSpan =
            "Equals() on Span and ReadOnlySpan is not supported. Use operator== instead.";

        public static string NotSupported_CannotCallGetHashCodeOnSpan =
            "GetHashCode() on Span and ReadOnlySpan is not supported.";

        public static string NotSupported_ChangeType = "ChangeType operation is not supported.";

        public static string NotSupported_CollectibleAssemblyResolve =
            "Resolving to a collectible assembly is not supported.";

        public static string NotSupported_CollectibleBoundNonCollectible =
            "A non-collectible assembly may not reference a collectible assembly.";

        public static string NotSupported_ContainsStackPtr = "An element type cannot contain a stack pointer.";

        public static string NotSupported_CreateInstanceWithTypeBuilder =
            "CreateInstance cannot be used with an object of type TypeBuilder.";

        public static string NotSupported_DBNullSerial =
            "Only one DBNull instance may exist, and calls to DBNull deserialization methods a" +
            "re not allowed.";

        public static string NotSupported_DynamicAssembly =
            "The invoked member is not supported in a dynamic assembly.";

        public static string NotSupported_DynamicMethodFlags =
            "Wrong MethodAttributes or CallingConventions for DynamicMethod. Only public, stat" +
            "ic, standard supported";

        public static string NotSupported_DynamicModule =
            "The invoked member is not supported in a dynamic module.";

        public static string NotSupported_FixedSizeCollection = "Collection was of a fixed size.";

        public static string InvalidProgram_GenericMethod =
            "Generic methods with UnmanagedCallersOnlyAttribute are invalid.";

        public static string InvalidOperation_SpanOverlappedOperation =
            "This operation is invalid on overlapping buffers.";

        public static string InvalidOperation_TimeProviderNullLocalTimeZone =
            "The operation cannot be performed when TimeProvider.LocalTimeZone is null.";

        public static string InvalidOperation_TimeProviderInvalidTimestampFrequency =
            "The operation cannot be performed when TimeProvider.TimestampFrequency is zero or" +
            " negative.";

        public static string NotSupported_IDispInvokeDefaultMemberWithNamedArgs =
            "Invoking default method with named arguments is not supported.";

        public static string NotSupported_IllegalOneByteBranch =
            "Illegal one-byte branch at position: {0}. Requested branch was: {1}.";

        public static string NotSupported_KeyCollectionSet =
            "Mutating a key collection derived from a dictionary is not allowed.";

        public static string NotSupported_ManagedActivation =
            "Cannot create uninitialized instances of types requiring managed activation.";

        public static string NotSupported_MaxWaitHandles =
            "The number of WaitHandles must be less than or equal to 64.";

        public static string NotSupported_MaxWaitHandles_STA =
            "The number of WaitHandles on a STA thread must be less than or equal to 63.";

        public static string NotSupported_MemStreamNotExpandable = "Memory stream is not expandable.";

        public static string NotSupported_MustBeModuleBuilder = "Module argument must be a ModuleBuilder.";

        public static string NotSupported_UnmanagedCallersOnlyTarget =
            "Methods with UnmanagedCallersOnlyAttribute cannot be used as delegate target.";

        public static string NotSupported_NoCodepageData =
            "No data is available for encoding {0}. For information on defining a custom encod" +
            "ing, see the documentation for the Encoding.RegisterProvider method.";

        public static string InvalidOperation_FunctionMissingUnmanagedCallersOnly =
            "Function not marked with UnmanagedCallersOnlyAttribute.";

        public static string InvalidProgram_NonBlittableTypes =
            "Non-blittable parameter types are invalid for UnmanagedCallersOnly methods.";

        public static string NotSupported_NonReflectedType = "Not supported in a non-reflected type.";

        public static string InvalidProgram_NonStaticMethod =
            "Non-static methods with UnmanagedCallersOnlyAttribute are invalid.";

        public static string NotImplemented_NoSupportForModOpt =
            "Mono does not currently support setting modOpt/modReq through SignatureHelper.";

        public static string NotSupported_NoParentDefaultConstructor =
            "Parent does not have a default constructor. The default constructor must be expli" +
            "citly defined.";

        public static string NotSupported_NoTypeInfo = "Cannot resolve {0} to a TypeInfo object.";

        public static string NotSupported_NYI = "This feature is not implemented.";

        public static string NotSupported_ObsoleteResourcesFile =
            "Found an obsolete .resources file in assembly \'{0}\'. Rebuild that .resources file" +
            " then rebuild that assembly.";

        public static string NotSupported_OleAutBadVarType =
            "The given Variant type is not supported by this OleAut function.";

        public static string NotSupported_OpenType = "Cannot create arrays of open type.";

        public static string NotSupported_OutputStreamUsingTypeBuilder =
            "Output streams do not support TypeBuilders.";

        public static string NotSupported_RangeCollection = "The specified operation is not supported on Ranges.";

        public static string NotSupported_Reading = "Accessor does not support reading.";

        public static string NotSupported_ReadOnlyCollection = "Collection is read-only.";

        public static string NotSupported_ResourceObjectSerialization =
            "Cannot read resources that depend on serialization.";

        public static string NotSupported_SignalAndWaitSTAThread =
            "SignalAndWait on a STA thread is not supported.";

        public static string NotSupported_StringComparison =
            "The string comparison type passed in is currently not supported.";

        public static string NotSupported_SubclassOverride = "Derived classes must provide an implementation.";

        public static string NotSupported_SymbolMethod =
            "Not supported in an array method of a type definition that is not complete.";

        public static string NotSupported_TooManyArgs = "Stack size too deep. Possibly too many arguments.";

        public static string NotSupported_Type = "Type is not supported.";

        public static string NotSupported_TypeNotYetCreated =
            "The invoked member is not supported before the type is created.";

        public static string NotSupported_UmsSafeBuffer =
            "This operation is not supported for an UnmanagedMemoryStream created from a SafeB" +
            "uffer.";

        public static string NotSupported_UnitySerHolder =
            "The UnitySerializationHolder object is designed to transmit information about oth" +
            "er types and is not serializable itself.";

        public static string NotSupported_UnknownTypeCode = "TypeCode \'{0}\' was not valid.";

        public static string NotSupported_WaitAllSTAThread =
            "WaitAll for multiple handles on a STA thread is not supported.";

        public static string NotSupported_UnreadableStream = "Stream does not support reading.";

        public static string NotSupported_UnseekableStream = "Stream does not support seeking.";

        public static string NotSupported_UnwritableStream = "Stream does not support writing.";

        public static string NotSupported_ValueClassCM =
            "Custom marshalers for value types are not currently supported.";

        public static string NotSupported_ValueCollectionSet =
            "Mutating a value collection derived from a dictionary is not allowed.";

        public static string NotSupported_VoidArray = "Arrays of System.Void are not supported.";

        public static string NotSupported_Writing = "Accessor does not support writing.";

        public static string NotSupported_WrongResourceReader_Type =
            "This .resources file should not be read with this reader. The resource reader typ" +
            "e is \"{0}\".";

        public static string NullReference_This = "The pointer for this method was null.";

        public static string ObjectDisposed_FileClosed = "Cannot access a closed file.";

        public static string ObjectDisposed_Generic = "Cannot access a disposed object.";

        public static string ObjectDisposed_ObjectName_Name = "Object name: \'{0}\'.";

        public static string ObjectDisposed_WriterClosed = "Cannot write to a closed TextWriter.";

        public static string ObjectDisposed_ReaderClosed = "Cannot read from a closed TextReader.";

        public static string ObjectDisposed_ResourceSet = "Cannot access a closed resource set.";

        public static string ObjectDisposed_StreamClosed = "Cannot access a closed Stream.";

        public static string ObjectDisposed_ViewAccessorClosed = "Cannot access a closed accessor.";

        public static string OperationCanceled = "The operation was canceled.";

        public static string Overflow_Byte = "Value was either too large or too small for an unsigned byte.";

        public static string Overflow_Char = "Value was either too large or too small for a character.";

        public static string Overflow_Currency = "Value was either too large or too small for a Currency.";

        public static string Overflow_Decimal = "Value was either too large or too small for a Decimal.";

        public static string Overflow_Duration =
            "The duration cannot be returned for TimeSpan.MinValue because the absolute value " +
            "of TimeSpan.MinValue exceeds the value of TimeSpan.MaxValue.";

        public static string Overflow_Int16 = "Value was either too large or too small for an Int16.";

        public static string Overflow_Int32 = "Value was either too large or too small for an Int32.";

        public static string Overflow_Int64 = "Value was either too large or too small for an Int64.";

        public static string Overflow_Int128 = "Value was either too large or too small for an Int128.";

        public static string Overflow_MutexReacquireCount =
            "The current thread attempted to reacquire a mutex that has reached its maximum ac" +
            "quire count.";

        public static string Overflow_NegateTwosCompNum =
            "Negating the minimum value of a twos complement number is invalid.";

        public static string Overflow_NegativeUnsigned =
            "The string was being parsed as an unsigned number and could not have a negative s" +
            "ign.";

        public static string Overflow_SByte = "Value was either too large or too small for a signed byte.";

        public static string Overflow_TimeSpanElementTooLarge =
            "The TimeSpan string \'{0}\' could not be parsed because at least one of the numeric" +
            " components is out of range or contains too many digits.";

        public static string Overflow_TimeSpanTooLong = "TimeSpan overflowed because the duration is too long.";

        public static string Overflow_UInt16 = "Value was either too large or too small for a UInt16.";

        public static string Overflow_UInt32 = "Value was either too large or too small for a UInt32.";

        public static string Overflow_UInt64 = "Value was either too large or too small for a UInt64.";

        public static string Overflow_UInt128 = "Value was either too large or too small for a UInt128.";

        public static string PlatformNotSupported_ArgIterator = "ArgIterator is not supported on this platform.";

        public static string PlatformNotSupported_ComInterop = "COM Interop is not supported on this platform.";

        public static string PlatformNotSupported_NamedSynchronizationPrimitives =
            "The named version of this synchronization primitive is not supported on this plat" +
            "form.";

        public static string PlatformNotSupported_NamedSyncObjectWaitAnyWaitAll =
            "Wait operations on multiple wait handles including a named synchronization primit" +
            "ive are not supported on this platform.";

        public static string PlatformNotSupported_OSXFileLocking =
            "Locking/unlocking file regions is not supported on this platform. Use FileShare o" +
            "n the entire file instead.";

        public static string PlatformNotSupported_ReflectionOnly =
            "ReflectionOnly loading is not supported on this platform.";

        public static string PlatformNotSupported_Remoting = "Remoting is not supported on this platform.";

        public static string PlatformNotSupported_SecureBinarySerialization =
            "Secure binary serialization is not supported on this platform.";

        public static string PlatformNotSupported_StrongNameSigning =
            "Strong-name signing is not supported on this platform.";

        public static string PlatformNotSupported_UnixFileMode =
            "Unix file modes are not supported on this platform.";

        public static string PlatformNotSupported_OverlappedIO =
            "This API is specific to the way in which Windows handles asynchronous I/O, and is" +
            " not supported on this platform.";

        public static string PlatformNotSupported_ITypeInfo =
            "Marshalling a System.Type to an unmanaged ITypeInfo or marshalling an ITypeInfo t" +
            "o a System.Type is not supported on this platform.";

        public static string PlatformNotSupported_IExpando =
            "Marshalling an IDispatchEx to an IReflect or IExpando is not supported on this pl" +
            "atform.";

        public static string PlatformNotSupported_AppDomains =
            "Secondary AppDomains are not supported on this platform.";

        public static string PlatformNotSupported_CAS = "Code Access Security is not supported on this platform.";

        public static string PlatformNotSupported_Principal =
            "Windows Principal functionality is not supported on this platform.";

        public static string PlatformNotSupported_ThreadAbort = "Thread abort is not supported on this platform.";

        public static string PlatformNotSupported_ThreadSuspend =
            "Thread suspend is not supported on this platform.";

        public static string PlatformNotSupported_UserDefinedSubclassesOfType =
            "User defined subclasses of System.Type are not yet supported.";

        public static string PostconditionFailed = "Postcondition failed.";

        public static string PostconditionFailed_Cnd = "Postcondition failed: {0}";

        public static string PostconditionOnExceptionFailed = "Postcondition failed after throwing an exception.";

        public static string PostconditionOnExceptionFailed_Cnd =
            "Postcondition failed after throwing an exception: {0}";

        public static string PreconditionFailed = "Precondition failed.";

        public static string PreconditionFailed_Cnd = "Precondition failed: {0}";

        public static string PersistedFiles_NoHomeDirectory =
            "The home directory of the current user could not be determined.";

        public static string Rank_MultiDimNotSupported = "Only single dimension arrays are supported here.";

        public static string Rank_MustMatch = "The specified arrays must have the same number of dimensions.";

        public static string ReflectionTypeLoad_LoadFailed = "Unable to load one or more of the requested types.";

        public static string ResourceReaderIsClosed = "ResourceReader is closed.";

        public static string Resources_StreamNotValid = "Stream is not a valid resource file.";

        public static string InvalidFilterCriteriaException_CritInt =
            "An Int32 must be provided for the filter criteria.";

        public static string InvalidFilterCriteriaException_CritString =
            "A String must be provided for the filter criteria.";

        public static string RFLCT_InvalidFieldFail = "\'{0}\' field specified was not found.";

        public static string RFLCT_InvalidPropFail = "\'{0}\' property specified was not found.";

        public static string RFLCT_Targ_ITargMismatch = "Object does not match target type.";

        public static string RFLCT_Targ_StatFldReqTarg = "Non-static field requires a target.";

        public static string RFLCT_Targ_StatMethReqTarg = "Non-static method requires a target.";

        public static string RuntimeWrappedException =
            "An object that does not derive from System.Exception has been wrapped in a Runtim" +
            "eWrappedException.";

        public static string StandardOleMarshalObjectGetMarshalerFailed = "Failed to get marshaler for IID {0}.";

        public static string Security_CannotReadFileData =
            "The time zone ID \'{0}\' was found on the local computer, but the application does " +
            "not have permission to read the file.";

        public static string Security_CannotReadRegistryData =
            "The time zone ID \'{0}\' was found on the local computer, but the application does " +
            "not have permission to read the registry information.";

        public static string Security_RegistryPermission = "Requested registry access is not allowed.";

        public static string SemaphoreSlim_ctor_InitialCountWrong =
            "The initialCount argument must be non-negative and less than or equal to the maxi" +
            "mumCount.";

        public static string SemaphoreSlim_ctor_MaxCountWrong =
            "The maximumCount argument must be a positive number. If a maximum is not required" +
            ", use the constructor without a maxCount parameter.";

        public static string SemaphoreSlim_Release_CountWrong =
            "The releaseCount argument must be greater than zero.";

        public static string SemaphoreSlim_Wait_TimeoutWrong =
            "The timeout must represent a value between -1 and Int32.MaxValue, inclusive.";

        public static string Serialization_BadParameterInfo =
            "Non existent ParameterInfo. Position bigger than member\'s parameters length.";

        public static string Serialization_CorruptField =
            "The value of the field \'{0}\' is invalid.  The serialized data is corrupt.";

        public static string Serialization_DateTimeTicksOutOfRange =
            "Invalid serialized DateTime data. Ticks must be between DateTime.MinValue.Ticks a" +
            "nd DateTime.MaxValue.Ticks.";

        public static string Serialization_DelegatesNotSupported =
            "Serializing delegates is not supported on this platform.";

        public static string Serialization_InsufficientState = "Insufficient state to return the real object.";

        public static string Serialization_InvalidData =
            "An error occurred while deserializing the object.  The serialized data is corrupt" +
            ".";

        public static string Serialization_InvalidEscapeSequence =
            "The serialized data contained an invalid escape sequence \'\\\\{0}\'.";

        public static string Serialization_InvalidOnDeser =
            "OnDeserialization method was called while the object was not being deserialized.";

        public static string Serialization_InvalidPtrValue =
            "An IntPtr or UIntPtr with an eight byte value cannot be deserialized on a machine" +
            " with a four byte word size.";

        public static string Serialization_InvalidType =
            "Only system-provided types can be passed to the GetUninitializedObject method. \'{" +
            "0}\' is not a valid instance of a type.";

        public static string Serialization_KeyValueDifferentSizes =
            "The keys and values arrays have different sizes.";

        public static string Serialization_MissingDateTimeData =
            "Invalid serialized DateTime data. Unable to find \'ticks\' or \'dateData\'.";

        public static string Serialization_MissingKeys = "The Keys for this Hashtable are missing.";

        public static string Serialization_MissingValues = "The values for this dictionary are missing.";

        public static string Serialization_NoParameterInfo = "Serialized member does not have a ParameterInfo.";

        public static string Serialization_NotFound = "Member \'{0}\' was not found.";

        public static string Serialization_NullKey = "One of the serialized keys is null.";

        public static string Serialization_OptionalFieldVersionValue = "Version value must be positive.";

        public static string Serialization_SameNameTwice =
            "Cannot add the same member twice to a SerializationInfo object.";

        public static string Serialization_StringBuilderCapacity =
            "The serialized Capacity property of StringBuilder must be positive, less than or " +
            "equal to MaxCapacity and greater than or equal to the String length.";

        public static string Serialization_StringBuilderMaxCapacity =
            "The serialized MaxCapacity property of StringBuilder must be positive and greater" +
            " than or equal to the String length.";

        public static string SetterHasNoParams = "Setter must have parameters.";

        public static string SpinLock_Exit_SynchronizationLockException =
            "The calling thread does not hold the lock.";

        public static string SpinLock_IsHeldByCurrentThread = "Thread tracking is disabled.";

        public static string SpinLock_TryEnter_ArgumentOutOfRange =
            "The timeout must be a value between -1 and Int32.MaxValue, inclusive.";

        public static string SpinLock_TryEnter_LockRecursionException =
            "The calling thread already holds the lock.";

        public static string SpinLock_TryReliableEnter_ArgumentException =
            "The tookLock argument must be set to false before calling this method.";

        public static string SpinWait_SpinUntil_TimeoutWrong =
            "The timeout must represent a value between -1 and Int32.MaxValue, inclusive.";

        public static string StackTrace_InFileILOffset = "in {0}:token 0x{1:x}+0x{2:x}";

        public static string StackTrace_InFileLineNumber = "in {0}:line {1}";

        public static string TargetInvocation_MethodCannotBeInvoked = "Method cannot be invoked.";

        public static string Task_ContinueWith_ESandLR =
            "The specified TaskContinuationOptions combined LongRunning and ExecuteSynchronous" +
            "ly.  Synchronous continuations should not be long running.";

        public static string Task_ContinueWith_NotOnAnything =
            "The specified TaskContinuationOptions excluded all continuation kinds.";

        public static string Task_InvalidTimerTimeSpan =
            "The value needs to translate in milliseconds to -1 (signifying an infinite timeou" +
            "t), 0, or a positive integer less than or equal to the maximum allowed timer dur" +
            "ation.";

        public static string Task_Delay_InvalidMillisecondsDelay =
            "The value needs to be either -1 (signifying an infinite timeout), 0 or a positive" +
            " integer.";

        public static string Task_Dispose_NotCompleted =
            "A task may only be disposed if it is in a completion state (RanToCompletion, Faul" +
            "ted or Canceled).";

        public static string Task_FromAsync_LongRunning =
            "It is invalid to specify TaskCreationOptions.LongRunning in calls to FromAsync.";

        public static string Task_FromAsync_PreferFairness =
            "It is invalid to specify TaskCreationOptions.PreferFairness in calls to FromAsync" +
            ".";

        public static string Task_MultiTaskContinuation_EmptyTaskList = "The tasks argument contains no tasks.";

        public static string Task_MultiTaskContinuation_FireOptions =
            "It is invalid to exclude specific continuation kinds for continuations off of mul" +
            "tiple tasks.";

        public static string Task_MultiTaskContinuation_NullTask = "The tasks argument included a null value.";

        public static string Task_RunSynchronously_AlreadyStarted =
            "RunSynchronously may not be called on a task that was already started.";

        public static string Task_RunSynchronously_Continuation =
            "RunSynchronously may not be called on a continuation task.";

        public static string Task_RunSynchronously_Promise =
            "RunSynchronously may not be called on a task not bound to a delegate, such as the" +
            " task returned from an asynchronous method.";

        public static string Task_RunSynchronously_TaskCompleted =
            "RunSynchronously may not be called on a task that has already completed.";

        public static string Task_Start_AlreadyStarted =
            "Start may not be called on a task that was already started.";

        public static string Task_Start_ContinuationTask = "Start may not be called on a continuation task.";

        public static string Task_Start_Promise = "Start may not be called on a promise-style task.";

        public static string Task_Start_TaskCompleted = "Start may not be called on a task that has completed.";

        public static string Task_ThrowIfDisposed = "The task has been disposed.";

        public static string Task_WaitMulti_NullTask = "The tasks array included at least one null element.";

        public static string TaskT_ConfigureAwait_InvalidOptions =
            "Task<TResult>.ConfigureAwait does not support ConfigureAwaitOptions.SuppressThrow" +
            "ing. To suppress throwing, instead cast the Task<TResult> to its base class Task" +
            " and await that with SuppressThrowing.";

        public static string TaskCanceledException_ctor_DefaultMessage = "A task was canceled.";

        public static string TaskCompletionSourceT_TrySetException_NoExceptions =
            "The exceptions collection was empty.";

        public static string TaskCompletionSourceT_TrySetException_NullException =
            "The exceptions collection included at least one null element.";

        public static string TaskExceptionHolder_UnhandledException =
            "A Task\'s exception(s) were not observed either by Waiting on the Task or accessin" +
            "g its Exception property. As a result, the unobserved exception was rethrown by " +
            "the finalizer thread.";

        public static string TaskExceptionHolder_UnknownExceptionType =
            "(Internal)Expected an Exception or an IEnumerable<Exception>";

        public static string TaskScheduler_ExecuteTask_WrongTaskScheduler =
            "ExecuteTask may not be called for a task which was previously queued to a differe" +
            "nt TaskScheduler.";

        public static string TaskScheduler_FromCurrentSynchronizationContext_NoCurrent =
            "The current SynchronizationContext may not be used as a TaskScheduler.";

        public static string TaskScheduler_InconsistentStateAfterTryExecuteTaskInline =
            "The TryExecuteTaskInline call to the underlying scheduler succeeded, but the task" +
            " body was not invoked.";

        public static string TaskSchedulerException_ctor_DefaultMessage =
            "An exception was thrown by a TaskScheduler.";

        public static string TaskT_DebuggerNoResult = "{Not yet computed}";

        public static string TaskT_TransitionToFinal_AlreadyCompleted =
            "An attempt was made to transition a task to a final state when it had already com" +
            "pleted.";

        public static string Thread_ApartmentState_ChangeFailed =
            "Failed to set the specified COM apartment state. Current apartment state \'{0}\'.";

        public static string Thread_GetSetCompressedStack_NotSupported =
            "Use CompressedStack.(Capture/Run) instead.";

        public static string Thread_Operation_RequiresCurrentThread =
            "This operation must be performed on the same thread as that represented by the Th" +
            "read instance.";

        public static string Threading_AbandonedMutexException = "The wait completed due to an abandoned mutex.";

        public static string Threading_WaitHandleCannotBeOpenedException = "No handle of the given name exists.";

        public static string Threading_WaitHandleCannotBeOpenedException_InvalidHandle =
            "A WaitHandle with system-wide name \'{0}\' cannot be created. A WaitHandle of a dif" +
            "ferent type might have the same name.";

        public static string Threading_WaitHandleTooManyPosts =
            "The WaitHandle cannot be signaled because it would exceed its maximum count.";

        public static string Threading_SemaphoreFullException =
            "Adding the specified count to the semaphore would cause it to exceed its maximum " +
            "count.";

        public static string Threading_ThreadInterrupted = "Thread was interrupted from a waiting state.";

        public static string ThreadLocal_Value_RecursiveCallsToValue =
            "ValueFactory attempted to access the Value property of this instance.";

        public static string ThreadLocal_ValuesNotAvailable =
            "The ThreadLocal object is not tracking values. To use the Values property, use a " +
            "ThreadLocal constructor that accepts the trackAllValues parameter and set the pa" +
            "rameter to true.";

        public static string TimeZoneNotFound_MissingData =
            "The time zone ID \'{0}\' was not found on the local computer.";

        public static string TypeInitialization_Default = "Type constructor threw an exception.";

        public static string TypeInitialization_Type = "The type initializer for \'{0}\' threw an exception.";

        public static string TypeLoad_AssemblyEnumContainsMethodsError =
            "Could not load type \'{0}\' from assembly \'{1}\' because it is an enum with methods." +
            "";

        public static string TypeLoad_AssemblyInaccessibleInterfaceError =
            "Could not load type \'{0}\' from assembly \'{1}\' because it implements the inaccessi" +
            "ble interface \'{2}\'.";

        public static string TypeLoad_AssemblySealedParentTypeError =
            "Could not load type \'{0}\' from assembly \'{1}\' because the parent type is sealed.";

        public static string TypeLoad_ResolveNestedType = "Could not resolve nested type \'{0}\' in type \"{1}\'.";

        public static string TypeLoad_ResolveType = "Could not resolve type \'{0}\'.";

        public static string TypeLoad_ResolveTypeFromAssembly =
            "Could not resolve type \'{0}\' in assembly \'{1}\'.";

        public static string UnauthorizedAccess_IODenied_NoPathName = "Access to the path is denied.";

        public static string UnauthorizedAccess_IODenied_Path = "Access to the path \'{0}\' is denied.";

        public static string UnauthorizedAccess_MemStreamBuffer =
            "MemoryStream\'s internal buffer cannot be accessed.";

        public static string UnauthorizedAccess_RegistryKeyGeneric_Key =
            "Access to the registry key \'{0}\' is denied.";

        public static string UnknownError_Num = "Unknown error \"{0}\".";

        public static string Verification_Exception = "Operation could destabilize the runtime.";

        public static string Word_At = "at";

        public static string DebugAssertBanner = "---- DEBUG ASSERTION FAILED ----";

        public static string DebugAssertLongMessage = "---- Assert Long Message ----";

        public static string DebugAssertShortMessage = "---- Assert Short Message ----";

        public static string LockRecursionException_ReadAfterWriteNotAllowed =
            "A read lock may not be acquired with the write lock held in this mode.";

        public static string LockRecursionException_RecursiveReadNotAllowed =
            "Recursive read lock acquisitions not allowed in this mode.";

        public static string LockRecursionException_RecursiveWriteNotAllowed =
            "Recursive write lock acquisitions not allowed in this mode.";

        public static string LockRecursionException_RecursiveUpgradeNotAllowed =
            "Recursive upgradeable lock acquisitions not allowed in this mode.";

        public static string LockRecursionException_WriteAfterReadNotAllowed =
            "Write lock may not be acquired with read lock held. This pattern is prone to dead" +
            "locks. Please ensure that read locks are released before taking a write lock. If" +
            " an upgrade is necessary, use an upgrade lock in place of the read lock.";

        public static string SynchronizationLockException_MisMatchedUpgrade =
            "The upgradeable lock is being released without being held.";

        public static string SynchronizationLockException_MisMatchedRead =
            "The read lock is being released without being held.";

        public static string SynchronizationLockException_IncorrectDispose =
            "The lock is being disposed while still being used. It either is being held by a t" +
            "hread and/or has active waiters waiting to acquire the lock.";

        public static string LockRecursionException_UpgradeAfterReadNotAllowed =
            "Upgradeable lock may not be acquired with read lock held.";

        public static string LockRecursionException_UpgradeAfterWriteNotAllowed =
            "Upgradeable lock may not be acquired with write lock held in this mode. Acquiring" +
            " Upgradeable lock gives the ability to read along with an option to upgrade to a" +
            " writer.";

        public static string SynchronizationLockException_MisMatchedWrite =
            "The write lock is being released without being held.";

        public static string NotSupported_SignatureType = "This method is not supported on signature types.";

        public static string Memory_OutstandingReferences =
            "Release all references before disposing this instance.";

        public static string HashCode_HashCodeNotSupported =
            "HashCode is a mutable struct and should not be compared with other HashCodes. Use" +
            " ToHashCode to retrieve the computed hash code.";

        public static string HashCode_EqualityNotSupported =
            "HashCode is a mutable struct and should not be compared with other HashCodes.";

        public static string Arg_TypeNotSupported = "Specified type is not supported";

        public static string IO_InvalidReadLength = "The read operation returned an invalid length.";

        public static string Arg_BasePathNotFullyQualified = "Basepath argument is not fully qualified.";

        public static string Arg_ElementsInSourceIsGreaterThanDestination =
            "Number of elements in source vector is greater than the destination array";

        public static string Arg_NullArgumentNullRef = "The method was called with a null array argument.";

        public static string Argument_AggressiveGCRequiresMaxGeneration =
            "AggressiveGC requires setting the generation parameter to MaxGeneration";

        public static string Argument_AggressiveGCRequiresBlocking =
            "AggressiveGC requires setting the blocking parameter to true.";

        public static string Argument_AggressiveGCRequiresCompacting =
            "AggressiveGC requires setting the compacting parameter to true.";

        public static string Argument_CannotPrepareAbstract = "Abstract methods cannot be prepared.";

        public static string Argument_InvalidGenericInstantiation = "The given generic instantiation was invalid.";

        public static string Argument_OverlapAlignmentMismatch = "Overlapping spans have mismatching alignment.";

        public static string Arg_InsufficientNumberOfElements =
            "At least {0} element(s) are expected in the parameter \"{1}\".";

        public static string Arg_MustBeNullTerminatedString = "The string must be null-terminated.";

        public static string ArgumentOutOfRange_Week_ISO = "The week parameter must be in the range 1 through 53.";

        public static string Argument_BadPInvokeMethod =
            "PInvoke methods must be static and native and cannot be abstract.";

        public static string Argument_BadPInvokeOnInterface = "PInvoke methods cannot exist on interfaces.";

        public static string Argument_BadTypeDef = "Bad type definition, can\'t handle \'{0}\' at \'{1}\'.";

        public static string Argument_MethodRedefined = "Method has been already defined.";

        public static string Argument_CannotExtractScalar =
            "Cannot extract a Unicode scalar value from the specified index in the input.";

        public static string Argument_CannotParsePrecision =
            "Characters following the format symbol must be a number of {0} or less.";

        public static string Argument_GWithPrecisionNotSupported =
            "The \'G\' format combined with a precision is not supported.";

        public static string Argument_PrecisionTooLarge = "Precision cannot be larger than {0}.";

        public static string Argument_PropertyClassUnmatchedWithConstructor =
            "Property \'{0}\' does not belong to the same class as the constructor.";

        public static string Argument_PropertyInvalidType = "Property \'{0}\' does not have a valid type.";

        public static string Argument_PropertyInvalidValue = "Property \'{0}\' does not have a valid value.";

        public static string Argument_PropertyMissingSetter = "\"Property \'{0}\' does not have a setter.";

        public static string Argument_PropertyUnmatchingPropertyType =
            "\"Value of property \'{0}\' does not match property type: \'{1}\' -> \'{2}\'.";

        public static string AssemblyDependencyResolver_FailedToLoadHostpolicy =
            "Cannot load hostpolicy library. AssemblyDependencyResolver is currently only supp" +
            "orted if the runtime is hosted through hostpolicy library.";

        public static string AssemblyDependencyResolver_FailedToResolveDependencies =
            "Dependency resolution failed for component {0} with error code {1}. Detailed erro" +
            "r: {2}";

        public static string Arg_EnumNotCloneable = "The supplied object does not implement ICloneable.";

        public static string InvalidOp_InvalidNewEnumVariant =
            "The returned enumerator does not implement IEnumVARIANT.";

        public static string InvalidSysctl = "sysctl {0} failed with {1} error.";

        public static string Argument_StructArrayTooLarge = "Array size exceeds addressing limitations.";

        public static string IndexOutOfRange_ArrayWithOffset = "ArrayWithOffset: offset exceeds array size.";

        public static string Serialization_DangerousDeserialization =
            "An action was attempted during deserialization that could lead to a security vuln" +
            "erability. The action has been aborted.";

        public static string Serialization_DangerousDeserialization_Switch =
            "An action was attempted during deserialization that could lead to a security vuln" +
            "erability. The action has been aborted. To allow the action, set the \'{0}\' AppCo" +
            "ntext switch to true.";

        public static string Argument_InvalidStartupHookSimpleAssemblyName =
            "The startup hook simple assembly name \'{0}\' is invalid. It must be a valid assemb" +
            "ly name and it may not contain directory separator, space or comma characters an" +
            "d must not end with \'.dll\'.";

        public static string Argument_StartupHookAssemblyLoadFailed =
            "Startup hook assembly \'{0}\' failed to load. See inner exception for details.";

        public static string InvalidOperation_CannotConstructCustomAttributeForTypeBuilderType =
            "Can\'t construct custom attribute for TypeBuilder type.";

        public static string InvalidOperation_CannotHaveFirstArgumentAsTypeBuilder =
            "First argument to GetCustomAttributes can\'t be a TypeBuilder.";

        public static string InvalidOperation_NonStaticComRegFunction = "COM register function must be static.";

        public static string InvalidOperation_NonStaticComUnRegFunction = "COM unregister function must be static.";

        public static string InvalidOperation_InvalidComRegFunctionSig =
            "COM register function must have a System.Type parameter and a void return type.";

        public static string InvalidOperation_InvalidComUnRegFunctionSig =
            "COM unregister function must have a System.Type parameter and a void return type." +
            "";

        public static string InvalidOperation_InvalidHandle = "The handle is invalid.";

        public static string InvalidOperation_MultipleComRegFunctions =
            "Type \'{0}\' has more than one COM registration function.";

        public static string InvalidOperation_MultipleComUnRegFunctions =
            "Type \'{0}\' has more than one COM unregistration function.";

        public static string InvalidOperation_ResetGlobalComWrappersInstance =
            "Attempt to update previously set global instance.";

        public static string InvalidOperation_ResetGlobalObjectiveCMsgSend =
            "Attempt to update previously set Objective-C msgSend API overrides.";

        public static string InvalidOperation_ObjectiveCMarshalNotInitialized =
            "Attempt to track an Objective-C Type without initializing.";

        public static string InvalidOperation_ReinitializeObjectiveCMarshal =
            "Attempt to reinitialize ObjectiveCMarshal.";

        public static string InvalidOperation_ObjectiveCTypeNoFinalizer =
            "Attempt to track an Objective-C Type without a finalizer.";

        public static string InvalidOperation_SuppliedInnerMustBeMarkedAggregation =
            "Supplying a non-null inner should also be marked as Aggregated.";

        public static string InvalidOperationException_NoGCRegionCallbackAlreadyRegistered =
            "A NoGCRegion callback is already registered.";

        public static string Argument_SpansMustHaveSameLength = "Length of items must be same as length of keys.";

        public static string NotSupported_CannotWriteToBufferedStreamIfReadBufferCannotBeFlushed =
            "Cannot write to a BufferedStream while the read buffer is not empty if the underl" +
            "ying stream is not seekable. Ensure that the stream underlying this BufferedStre" +
            "am can seek or avoid interleaving read and write operations on this BufferedStre" +
            "am.";

        public static string GenericInvalidData = "Found invalid data while decoding.";

        public static string Argument_ResourceScopeWrongDirection =
            "Resource type in the ResourceScope enum is going from a more restrictive resource" +
            " type to a more general one.  From: \"{0}\"  To: \"{1}\"";

        public static string ArgumentNull_TypeRequiredByResourceScope =
            "The type parameter cannot be null when scoping the resource\'s visibility to Priva" +
            "te or Assembly.";

        public static string Argument_BadResourceScopeTypeBits =
            "Unknown value for the ResourceScope: {0}  Too many resource type bits may be set." +
            "";

        public static string Argument_BadResourceScopeVisibilityBits =
            "Unknown value for the ResourceScope: {0}  Too many resource visibility bits may b" +
            "e set.";

        public static string Argument_EmptyString = "The value cannot be an empty string.";

        public static string Argument_EmptyOrWhiteSpaceString =
            "The value cannot be an empty string or composed entirely of whitespace.";

        public static string Argument_FrameworkNameInvalid = "FrameworkName is invalid.";

        public static string Argument_FrameworkNameInvalidVersion = "FrameworkName version component is invalid.";

        public static string Argument_FrameworkNameMissingVersion = "FrameworkName version component is missing.";

        public static string Argument_FrameworkNameTooShort =
            "FrameworkName cannot have less than two components or more than three components." +
            "";

        public static string Arg_SwitchExpressionException =
            "Non-exhaustive switch expression failed to match its input.";

        public static string Arg_ContextMarshalException =
            "Attempted to marshal an object across a context boundary.";

        public static string Arg_AppDomainUnloadedException = "Attempted to access an unloaded AppDomain.";

        public static string SwitchExpressionException_UnmatchedValue = "Unmatched value was {0}.";

        public static string Encoding_UTF7_Disabled =
            "Support for UTF-7 is disabled. See {0} for more information.";

        public static string IDynamicInterfaceCastable_DoesNotImplementRequested =
            "Type \'{0}\' returned by IDynamicInterfaceCastable does not implement the requested" +
            " interface \'{1}\'.";

        public static string IDynamicInterfaceCastable_MissingImplementationAttribute =
            "Type \'{0}\' returned by IDynamicInterfaceCastable does not have the attribute \'{1}" +
            "\'.";

        public static string IDynamicInterfaceCastable_NotInterface =
            "Type \'{0}\' returned by IDynamicInterfaceCastable is not an interface.";

        public static string Arg_MustBeHalf = "Object must be of type Half.";

        public static string Arg_MustBeRune = "Object must be of type Rune.";

        public static string BinaryFormatter_SerializationDisallowed =
            "BinaryFormatter serialization and deserialization are disabled within this applic" +
            "ation. See https://aka.ms/binaryformatter for more information.";

        public static string NotSupported_CodeBase =
            "CodeBase is not supported on assemblies loaded from a single-file bundle.";

        public static string Activator_CannotCreateInstance =
            "Cannot dynamically create an instance of type \'{0}\'. Reason: {1}";

        public static string Argv_IncludeDoubleQuote = "The argv[0] argument cannot include a double quote.";

        public static string ResourceManager_ReflectionNotAllowed =
            "Use of ResourceManager for custom types is disabled. Set the MSBuild Property Cus" +
            "tomResourceTypesSupport to true in order to enable it.";

        public static string InvalidOperation_AssemblyNotEditable = "The assembly can not be edited or changed.";

        public static string InvalidOperation_EditFailed = "The assembly update failed.";

        public static string NotSupported_DebuggerAttached =
            "Assembly updates cannot be applied while a debugger is attached.";

        public static string NotSupported_MethodBodyReplacement =
            "Method body replacement not supported in this runtime.";

        public static string NotSupported_COM =
            "Built-in COM has been disabled via a feature switch. See https://aka.ms/dotnet-il" +
            "link/com for more information.";

        public static string NotSupported_CppCli =
            "C++/CLI activation has been disabled via a feature switch. See https://aka.ms/dot" +
            "net-illink/nativehost for more information.";

        public static string InvalidOperation_EmptyQueue = "Queue empty.";

        public static string Arg_FileIsDirectory_Name = "The target file \'{0}\' is a directory, not a file.";

        public static string Arg_InvalidFileAttrs = "Invalid File or Directory attributes value.";

        public static string Arg_InvalidUnixFileMode = "Invalid UnixFileMode value.";

        public static string Arg_Path2IsRooted = "Second path fragment must not be a drive or UNC name.";

        public static string Arg_PathIsVolume = "Path must not be a drive.";

        public static string Argument_FileNotResized = "The stream\'s length cannot be changed.";

        public static string Argument_InvalidSubPath =
            "The directory specified, \'{0}\', is not a subdirectory of \'{1}\'.";

        public static string IO_CannotCreateDirectory = "The specified directory \'{0}\' cannot be created.";

        public static string IO_CannotReplaceSameFile =
            "The source \'{0}\' and destination \'{1}\' are the same file.";

        public static string IO_NotAFile = "The specified path \'{0}\' is not a file.";

        public static string IO_SourceDestMustBeDifferent = "Source and destination path must be different.";

        public static string IO_SourceDestMustHaveSameRoot =
            "Source and destination path must have identical roots. Move will not work across " +
            "volumes.";

        public static string IO_SyncOpOnUIThread =
            "Synchronous operations should not be performed on the UI thread.  Consider wrappi" +
            "ng this method in Task.Run.";

        public static string IndexOutOfRange_IORaceCondition =
            @"Probable I/O race condition detected while copying memory. The I/O package is not thread safe by default. In multithreaded applications, a stream must be accessed in a thread-safe way, such as a thread-safe wrapper returned by TextReader's or TextWriter's Synchronized methods. This also applies to classes like StreamWriter and StreamReader.";

        public static string PlatformNotSupported_FileEncryption =
            "File encryption is not supported on this platform.";

        public static string Arg_MemberInfoNotFound = "A MemberInfo that matches \'{0}\' could not be found.";

        public static string InvalidOperation_BadTZHeader =
            "Bad magic in \'{0}\': Header starts with \'{1}\' instead of \'tzdata\'";

        public static string InvalidOperation_ReadTZError =
            "Unable to fully read from file \'{0}\' at offset {1} length {2}; read {3} bytes exp" +
            "ected {4}.";

        public static string InvalidOperation_BadIndexLength = "Length in index file less than AndroidTzDataHeader";

        public static string TimeZoneNotFound_ValidTimeZoneFileMissing =
            "Unable to properly load any time zone data files.";

        public static string NullabilityInfoContext_NotSupported =
            "NullabilityInfoContext is not supported in the current application because \'Syste" +
            "m.Reflection.NullabilityInfoContext.IsSupported\' is set to false. Set the MSBuil" +
            "d Property \'NullabilityInfoContextSupport\' to true in order to enable it.";

        public static string ThreadState_AlreadyStarted = "Thread is running or terminated; it cannot restart.";

        public static string ThreadState_NotStarted = "Thread has not been started.";

        public static string ThreadState_Dead_Priority = "Thread is dead; priority cannot be accessed.";

        public static string ThreadState_Dead_State = "Thread is dead; state cannot be accessed.";

        public static string ThreadState_SetPriorityFailed = "Unable to set thread priority.";

        public static string NullReference_InvokeNullRefReturned = "The target method returned a null reference.";

        public static string Arg_OpenType = "Cannot create an instance of {0} as it is an open type.";

        public static string ArgumentOutOfRange_NoGCLohSizeGreaterTotalSize =
            "lohSize can\'t be greater than totalSize";

        public static string ArgumentOutOfRangeException_NoGCRegionSizeTooLarge =
            "totalSize is too large. For more information about setting the maximum size, see " +
            "\"Latency Modes\" in http://go.microsoft.com/fwlink/?LinkId=522706.";

        public static string InvalidOperationException_AlreadyInNoGCRegion =
            "The NoGCRegion mode was already in progress.";

        public static string InvalidOperationException_NoGCRegionAllocationExceeded =
            "Allocated memory exceeds specified memory for NoGCRegion mode.";

        public static string InvalidOperationException_NoGCRegionInduced =
            "Garbage collection was induced in NoGCRegion mode.";

        public static string InvalidOperationException_NoGCRegionNotInProgress = "NoGCRegion mode must be set.";

        public static string InvalidOperationException_HardLimitTooLow =
            "RefreshMemoryLimit failed with too low hard limit.";

        public static string InvalidOperationException_HardLimitInvalid =
            "RefreshMemoryLimit failed with invalid hard limit.";

        public static string PlatformNotSupported_ReflectionEmit =
            "Dynamic code generation is not supported on this platform.";

        public static string PlatformNotSupported_AssemblyName_GetAssemblyName =
            "AssemblyName.GetAssemblyName() is not supported on this platform.";

        public static string PlatformNotSupported_HybridGlobalizationWithCompareOptions =
            "CompareOptions = {0} are not supported when HybridGlobalization=true on this plat" +
            "form. Disable it to load larger ICU bundle, then use this option.";

        public static string PlatformNotSupported_HybridGlobalizationWithMixedCompositions =
            "Mixed compositions in string not supported when HybridGlobalization=true on this " +
            "platform. Disable it to load larger ICU bundle, then use this option.";

        public static string PlatformNotSupported_HybridGlobalizationWithCompareOptionsForCulture =
            "CompareOptions = {0} are not supported for culture = {1} when HybridGlobalization" +
            "=true on this platform. Disable it to load larger ICU bundle, then use this opti" +
            "on.";

        public static string PlatformNotSupported_HybridGlobalizationWithMatchLength =
            "Match length calculation is not supported when HybridGlobalization=true. Disable " +
            "it to load larger ICU bundle, then use this function.";

        public static string PlatformNotSupported_NonZeroLowerBound =
            "Arrays with non-zero lower bounds are not supported.";

        public static string PlatformNotSupported_HybridGlobalization =
            "{0} is not supported when HybridGlobalization=true. Disable it to load larger ICU" +
            " bundle, then use this option.";

        public static string NotSupported_BodyRemoved =
            "The body of this method was removed by the AOT compiler because it\'s not callable" +
            ".";

        public static string NotSupported_FeatureBodyRemoved =
            "The feature associated with this method was removed.";

        public static string NotSupported_IncompleteTypes = "This method is not implemented for incomplete types.";

        public static string NotSupported_InstanceBodyRemoved =
            "The body of this instance method was removed by the AOT compiler. This can happen" +
            " if the owning type was not seen as allocated by the AOT compiler.";

        public static string Arg_UnavailableTypeLoadException =
            "Attempted to load a type that was not created during ahead of time compilation.";

        public static string TypeInitialization_Type_NoTypeAvailable =
            "A type initializer threw an exception. To determine which type, inspect the Inner" +
            "Exception\'s StackTrace property.";

        public static string Security_InvalidAssemblyPublicKey = "Invalid assembly public key.";

        public static string ClassLoad_General = "Could not load type \'{0}\' from assembly \'{1}\'.";

        public static string ClassLoad_General_Hex =
            "Could not load type, method or field \'0x{0:x}\' from assembly \'0x{1:x}\'.";

        public static string ClassLoad_RankTooLarge = "\'{0}\' from assembly \'{1}\' has too many dimensions.";

        public static string ClassLoad_InlineArrayFieldCount =
            "InlineArrayAttribute requires that the target type has a single instance field. T" +
            "ype: \'{0}\'.  Assembly: \'{1}\'.";

        public static string ClassLoad_InlineArrayLength =
            "InlineArrayAttribute requires that the length argument is greater than 0. Type: \'" +
            "{0}\'.  Assembly: \'{1}\'.";

        public static string ClassLoad_InlineArrayExplicit =
            "InlineArrayAttribute cannot be applied to a type with explicit layout. Type: \'{0}" +
            "\'.  Assembly: \'{1}\'.";

        public static string ClassLoad_ExplicitGeneric =
            "Could not load type \'{0}\' from assembly \'{1}\' because generic types cannot have e" +
            "xplicit layout.";

        public static string ClassLoad_BadFormat =
            "Could not load type \'{0}\' from assembly \'{1}\' because the format is invalid.";

        public static string ClassLoad_ValueClassTooLarge =
            "Array of type \'{0}\' from assembly \'{1}\' cannot be created because base value type" +
            " is too large.";

        public static string ClassLoad_ExplicitLayout =
            "Could not load type \'{0}\' from assembly \'{1}\' because it contains an object field" +
            " at offset \'{2}\' that is incorrectly aligned or overlapped by a non-object field" +
            ".";

        public static string EE_MissingMethod = "Method not found: \'{0}\'.";

        public static string EE_MissingField = "Field not found: \'{0}\'.";

        public static string InvalidProgram_Specific =
            "Common Language Runtime detected an invalid program. The body of method \'{0}\' is " +
            "invalid.";

        public static string InvalidProgram_Vararg =
            "Method \'{0}\' has a variable argument list. Variable argument lists are not suppor" +
            "ted in .NET Core.";

        public static string InvalidProgram_CallVirtFinalize =
            "Object.Finalize() can not be called directly. It is only callable by the runtime." +
            "";

        public static string InvalidProgram_MultipleCallConv =
            "Multiple unmanaged calling conventions are specified. Only a single calling conve" +
            "ntion is supported.";

        public static string Delegate_GarbageCollected =
            "The corresponding delegate has been garbage collected. Please make sure the deleg" +
            "ate is still referenced by managed code when you are using the marshalled native" +
            " function pointer.";

        public static string Arg_EntryPointNotFoundExceptionParameterized =
            "Unable to find an entry point named \'{0}\' in native library \'{1}\'.";

        public static string Arg_EntryPointNotFoundExceptionParameterizedNoLibrary =
            "Unable to find an entry point named \'{0}\' in native library.";

        public static string DllNotFound_Windows = "Unable to load DLL \'{0}\' or one of its dependencies: {1}";

        public static string DllNotFound_Linux =
            "Unable to load shared library \'{0}\' or one of its dependencies. In order to help " +
            "diagnose loading problems, consider using a tool like strace. If you\'re using gl" +
            "ibc, consider setting the LD_DEBUG environment variable: {1}";

        public static string DllNotFound_Mac =
            "Unable to load shared library \'{0}\' or one of its dependencies. In order to help " +
            "diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment" +
            " variable: {1}";

        public static string InvalidOperation_ComInteropRequireComWrapperInstance =
            "COM Interop requires ComWrapper instance registered for marshalling.";

        public static string InvalidOperation_ComInteropRequireComWrapperTrackerInstance =
            "COM Interop requires ComWrapper instance registered for reference tracker support" +
            ".";

        public static string ArgumentOutOfRange_NotGreaterThanBufferLength =
            "Must not be greater than the length of the buffer.";

        public static string StructMarshalling_MissingInteropData =
            "\'{0}\' is missing structure marshalling data. This can happen for code that is not" +
            " compatible with AOT. Inspect and fix AOT related warnings that were generated w" +
            "hen the app was published. For more information see https://aka.ms/nativeaot-com" +
            "patibility";

        public static string DelegateMarshalling_MissingInteropData =
            "\'{0}\' is missing delegate marshalling data. This can happen for code that is not " +
            "compatible with AOT. Inspect and fix AOT related warnings that were generated wh" +
            "en the app was published. For more information see https://aka.ms/nativeaot-comp" +
            "atibility";

        public static string Argument_AssemblyGetTypeCannotSpecifyAssembly =
            "Type names passed to Assembly.GetType() must not specify an assembly.";

        public static string NoMetadataTokenAvailable =
            "There is no metadata token available for the given member.";

        public static string ArgumentException_InvalidTypeArgument =
            "The type \'{0}\' may not be used as a type argument.";

        public static string ArgumentException_InvalidArrayElementType =
            "The type \'{0}\' may not be used as an array element type.";

        public static string PlatformNotSupported_NoTypeHandleForOpenTypes =
            "TypeHandles are not supported for types that return true for ContainsGenericParam" +
            "eters.";

        public static string Reflection_CustomReflectionObjectsNotSupported =
            "The type \'{0}\' was created by a custom ReflectionContext and cannot be used here." +
            "";

        public static string Argument_CannotBeByRefType = "Type can\'t be a byref type.";

        public static string CannotCreateByRefOfByRef = "Cannot create a byref of a byref: {0}";

        public static string CannotCreatePointerOfByRef = "Cannot create a pointer to a byref: {0}";

        public static string TypeLoad_TypeNotFound = "The type \'{0}\' cannot be found.";

        public static string TypeLoad_TypeNotFoundInAssembly =
            "The type \'{0}\' cannot be found in assembly \'{1}\'.";

        public static string TypeLoad_MethodOverrideNotVirtual =
            "Method \'{0}\' overrides \'{1}\' but it is not virtual.";

        public static string FileNotFound_AssemblyNotFound =
            "Cannot load assembly \'{0}\'. No metadata found for this assembly.";

        public static string Argument_DirectorySeparatorInvalid =
            "The value may not contain directory separator characters.";

        public static string InvalidOperation_NotFunctionPointer =
            "Method may only be called on a Type for which Type.IsFunctionPointer is true.";

        public static string NotSupported_ModifiedType =
            "Modified types do not support this member. Use the UnderlyingSystemType property " +
            "to call this member.";

        public static string Argument_UnexpectedStateForKnownCallback =
            "An unexpected state object was encountered. This is usually a sign of a bug in as" +
            "ync method custom infrastructure, such as a custom awaiter or IValueTaskSource i" +
            "mplementation.";

        public static string OutOfMemory_StringTooLong = "String length exceeded supported range.";

        public static string NoElements= "Sequence contains no elements";

        public static string NoMatch = "Sequence contains no matching element";

        public static string Format(string template, object arg0)
        {
            return template.Format(arg0);
        }
        
        public static string Format(string template, object arg0,object arg1)
        {
            return template.Format(arg0,arg1);
        }
        
        public static string Format(string template, object arg0,object arg1,object arg3)
        {
            return template.Format(arg0,arg1,arg3);
        }
        
        public static string Format(string template,params object[] targetType)
        {
            return template.Format(targetType);
        }
    }
}